
01_rtos_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004604  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ec  080047ec  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080047ec  080047ec  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080047ec  080047ec  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ec  080047ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080047f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000060  08004854  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08004854  0000623c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b2b  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd8  00000000  00000000  00017bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  0001b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019755  00000000  00000000  0001c753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013046  00000000  00000000  00035ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093453  00000000  00000000  00048eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  000dc384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e1060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080046fc 	.word	0x080046fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080046fc 	.word	0x080046fc

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	200000d0 	.word	0x200000d0

08000180 <mPrintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mPrintf(const char* format,...)
{
 8000180:	b40f      	push	{r0, r1, r2, r3}
 8000182:	b580      	push	{r7, lr}
 8000184:	b082      	sub	sp, #8
 8000186:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<40;i++){
 8000188:	2300      	movs	r3, #0
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	e006      	b.n	800019c <mPrintf+0x1c>
		buffer[i] = 0;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	4a0f      	ldr	r2, [pc, #60]	@ (80001d0 <mPrintf+0x50>)
 8000192:	2100      	movs	r1, #0
 8000194:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<40;i++){
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	3301      	adds	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	2b27      	cmp	r3, #39	@ 0x27
 80001a0:	d9f5      	bls.n	800018e <mPrintf+0xe>
	}
	va_list arg;
	va_start(arg,format);
 80001a2:	f107 0314 	add.w	r3, r7, #20
 80001a6:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer,sizeof(buffer),format,arg);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	693a      	ldr	r2, [r7, #16]
 80001ac:	2128      	movs	r1, #40	@ 0x28
 80001ae:	4808      	ldr	r0, [pc, #32]	@ (80001d0 <mPrintf+0x50>)
 80001b0:	f003 fe08 	bl	8003dc4 <vsniprintf>
	va_end(arg);
	HAL_UART_Transmit(&huart1,(uint8_t*)buffer,sizeof(buffer),HAL_MAX_DELAY);
 80001b4:	f04f 33ff 	mov.w	r3, #4294967295
 80001b8:	2228      	movs	r2, #40	@ 0x28
 80001ba:	4905      	ldr	r1, [pc, #20]	@ (80001d0 <mPrintf+0x50>)
 80001bc:	4805      	ldr	r0, [pc, #20]	@ (80001d4 <mPrintf+0x54>)
 80001be:	f001 fc1d 	bl	80019fc <HAL_UART_Transmit>
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr
 80001d0:	20000328 	.word	0x20000328
 80001d4:	200002d0 	.word	0x200002d0

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b094      	sub	sp, #80	@ 0x50
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 faa9 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f855 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f8c3 	bl	8000370 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ea:	f000 f897 	bl	800031c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  osMutexDef(myMutextt);
 80001ee:	2300      	movs	r3, #0
 80001f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80001f2:	2300      	movs	r3, #0
 80001f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  myMutexHandle = osMutexCreate(osMutex(myMutextt));
 80001f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fe50 	bl	8001ea0 <osMutexCreate>
 8000200:	4603      	mov	r3, r0
 8000202:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <main+0xa0>)
 8000204:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMailQDef(myQueue01, 14, DATA_Typedef);
 8000206:	230e      	movs	r3, #14
 8000208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800020a:	2308      	movs	r3, #8
 800020c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800020e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000212:	643b      	str	r3, [r7, #64]	@ 0x40
  myQueue01Handle = osMailCreate(osMailQ(myQueue01), NULL);
 8000214:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 feb5 	bl	8001f8a <osMailCreate>
 8000220:	4603      	mov	r3, r0
 8000222:	4a16      	ldr	r2, [pc, #88]	@ (800027c <main+0xa4>)
 8000224:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, 3, 0, 128);
 8000226:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <main+0xa8>)
 8000228:	f107 041c 	add.w	r4, r7, #28
 800022c:	461d      	mov	r5, r3
 800022e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800023a:	f107 031c 	add.w	r3, r7, #28
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fdcd 	bl	8001de0 <osThreadCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a0e      	ldr	r2, [pc, #56]	@ (8000284 <main+0xac>)
 800024a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(Task02, StartTask02, 2, 0, 128);
 800024c:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <main+0xb0>)
 800024e:	463c      	mov	r4, r7
 8000250:	461d      	mov	r5, r3
 8000252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800025e:	463b      	mov	r3, r7
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fdbc 	bl	8001de0 <osThreadCreate>
 8000268:	4603      	mov	r3, r0
 800026a:	4a08      	ldr	r2, [pc, #32]	@ (800028c <main+0xb4>)
 800026c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800026e:	f001 fdb0 	bl	8001dd2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	bf00      	nop
 8000274:	e7fd      	b.n	8000272 <main+0x9a>
 8000276:	bf00      	nop
 8000278:	20000324 	.word	0x20000324
 800027c:	20000320 	.word	0x20000320
 8000280:	0800471c 	.word	0x0800471c
 8000284:	20000318 	.word	0x20000318
 8000288:	08004740 	.word	0x08004740
 800028c:	2000031c 	.word	0x2000031c

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	@ 0x40
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2228      	movs	r2, #40	@ 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fd9e 	bl	8003de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fcc1 	bl	8000c60 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e4:	f000 f898 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff2e 	bl	8001164 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030e:	f000 f883 	bl	8000418 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	@ 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000322:	4a12      	ldr	r2, [pc, #72]	@ (800036c <MX_USART1_UART_Init+0x50>)
 8000324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800032c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	@ (8000368 <MX_USART1_UART_Init+0x4c>)
 8000354:	f001 fb02 	bl	800195c <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035e:	f000 f85b 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200002d0 	.word	0x200002d0
 800036c:	40013800 	.word	0x40013800

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <MX_GPIO_Init+0x40>)
 800037c:	f043 0320 	orr.w	r3, r3, #32
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0320 	and.w	r3, r3, #32
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0304 	and.w	r3, r3, #4
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <StartTask02>:
/* USER CODE BEGIN 4 */
//osEvent recv_task1_data;
//DATA_Typedef *receiver;
//nhan struct
void StartTask02(void const * argument)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	//state1= eTaskGetState((TaskHandle_t)Task01Handle);
	//state2= eTaskGetState((TaskHandle_t)Task02Handle);
	//mPrintf("State task1 %d\nState task2 %d \n",state1,state2);
	//mPrintf("Task2 \n");
//	osSemaphoreWait(myBinarySem01Handle, osWaitForever);
	mPrintf("Task 2 is running \n");
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <StartTask02+0x1c>)
 80003be:	f7ff fedf 	bl	8000180 <mPrintf>
		/*ở đây trong event.value.p nó đọc và trả về kiểu */
//		mPrintf("%d cnt is:\n ", receiver->header);
//		osMailFree(myQueue01Handle, receiver);
//	}
	//*receiver = recv_task1_data.value.p;
    osDelay(1000);
 80003c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c6:	f001 fd57 	bl	8001e78 <osDelay>
	mPrintf("Task 2 is running \n");
 80003ca:	bf00      	nop
 80003cc:	e7f6      	b.n	80003bc <StartTask02+0x8>
 80003ce:	bf00      	nop
 80003d0:	0800475c 	.word	0x0800475c

080003d4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	//state1= eTaskGetState((TaskHandle_t)Task01Handle);
	//state2= eTaskGetState((TaskHandle_t)Task02Handle);
	//mPrintf("State task1 %d\nState task2 %d \n",state1,state2);
	//mPrintf("Task2 \n");
//	osSemaphoreWait(myBinarySem01Handle, osWaitForever);
	mPrintf("Task 1 is running \n");
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <StartTask01+0x1c>)
 80003de:	f7ff fecf 	bl	8000180 <mPrintf>
//		mPrintf("%d cnt is:\n ", receiver->header);
//		osMailFree(myQueue01Handle, receiver);
	//}
	//*receiver = recv_task1_data.value.p;
//	osSemaphoreRelease(myBinarySem01Handle);
    osDelay(1000);
 80003e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003e6:	f001 fd47 	bl	8001e78 <osDelay>
	mPrintf("Task 1 is running \n");
 80003ea:	bf00      	nop
 80003ec:	e7f6      	b.n	80003dc <StartTask01+0x8>
 80003ee:	bf00      	nop
 80003f0:	08004770 	.word	0x08004770

080003f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d101      	bne.n	800040a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000406:	f000 f9ab 	bl	8000760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40000800 	.word	0x40000800

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <HAL_MspInit+0x68>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a17      	ldr	r2, [pc, #92]	@ (800048c <HAL_MspInit+0x68>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b15      	ldr	r3, [pc, #84]	@ (800048c <HAL_MspInit+0x68>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b12      	ldr	r3, [pc, #72]	@ (800048c <HAL_MspInit+0x68>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a11      	ldr	r2, [pc, #68]	@ (800048c <HAL_MspInit+0x68>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <HAL_MspInit+0x68>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	210f      	movs	r1, #15
 800045e:	f06f 0001 	mvn.w	r0, #1
 8000462:	f000 fa4e 	bl	8000902 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000466:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <HAL_MspInit+0x6c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	@ (8000490 <HAL_MspInit+0x6c>)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000

08000494 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000520 <HAL_UART_MspInit+0x8c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d131      	bne.n	8000518 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <HAL_UART_MspInit+0x94>)
 80004fa:	f000 fa2d 	bl	8000958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <HAL_UART_MspInit+0x94>)
 8000514:	f000 fa20 	bl	8000958 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40013800 	.word	0x40013800
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800

0800052c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08e      	sub	sp, #56	@ 0x38
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000542:	4b34      	ldr	r3, [pc, #208]	@ (8000614 <HAL_InitTick+0xe8>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a33      	ldr	r2, [pc, #204]	@ (8000614 <HAL_InitTick+0xe8>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <HAL_InitTick+0xe8>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800055a:	f107 0210 	add.w	r2, r7, #16
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff6d 	bl	8001444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800056a:	6a3b      	ldr	r3, [r7, #32]
 800056c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800056e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000570:	2b00      	cmp	r3, #0
 8000572:	d103      	bne.n	800057c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000574:	f000 ff3e 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 8000578:	6378      	str	r0, [r7, #52]	@ 0x34
 800057a:	e004      	b.n	8000586 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800057c:	f000 ff3a 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 8000580:	4603      	mov	r3, r0
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000588:	4a23      	ldr	r2, [pc, #140]	@ (8000618 <HAL_InitTick+0xec>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	0c9b      	lsrs	r3, r3, #18
 8000590:	3b01      	subs	r3, #1
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000594:	4b21      	ldr	r3, [pc, #132]	@ (800061c <HAL_InitTick+0xf0>)
 8000596:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <HAL_InitTick+0xf4>)
 8000598:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800059a:	4b20      	ldr	r3, [pc, #128]	@ (800061c <HAL_InitTick+0xf0>)
 800059c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005a2:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <HAL_InitTick+0xf0>)
 80005a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_InitTick+0xf0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <HAL_InitTick+0xf0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <HAL_InitTick+0xf0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005ba:	4818      	ldr	r0, [pc, #96]	@ (800061c <HAL_InitTick+0xf0>)
 80005bc:	f000 ff90 	bl	80014e0 <HAL_TIM_Base_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d11b      	bne.n	8000606 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005ce:	4813      	ldr	r0, [pc, #76]	@ (800061c <HAL_InitTick+0xf0>)
 80005d0:	f000 ffde 	bl	8001590 <HAL_TIM_Base_Start_IT>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d111      	bne.n	8000606 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005e2:	201e      	movs	r0, #30
 80005e4:	f000 f9a9 	bl	800093a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b0f      	cmp	r3, #15
 80005ec:	d808      	bhi.n	8000600 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005ee:	2200      	movs	r2, #0
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	201e      	movs	r0, #30
 80005f4:	f000 f985 	bl	8000902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <HAL_InitTick+0xf8>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	e002      	b.n	8000606 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000606:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800060a:	4618      	mov	r0, r3
 800060c:	3738      	adds	r7, #56	@ 0x38
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	431bde83 	.word	0x431bde83
 800061c:	20000350 	.word	0x20000350
 8000620:	40000800 	.word	0x40000800
 8000624:	20000004 	.word	0x20000004

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000660:	4802      	ldr	r0, [pc, #8]	@ (800066c <TIM4_IRQHandler+0x10>)
 8000662:	f000 ffe7 	bl	8001634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000350 	.word	0x20000350

08000670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000678:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <_sbrk+0x5c>)
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <_sbrk+0x60>)
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <_sbrk+0x64>)
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <_sbrk+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	429a      	cmp	r2, r3
 800069e:	d207      	bcs.n	80006b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a0:	f003 fba6 	bl	8003df0 <__errno>
 80006a4:	4603      	mov	r3, r0
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e009      	b.n	80006c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <_sbrk+0x64>)
 80006c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20005000 	.word	0x20005000
 80006d0:	00000400 	.word	0x00000400
 80006d4:	20000398 	.word	0x20000398
 80006d8:	20001240 	.word	0x20001240

080006dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff fff8 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ee:	490c      	ldr	r1, [pc, #48]	@ (8000720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000704:	4c09      	ldr	r4, [pc, #36]	@ (800072c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f003 fb73 	bl	8003dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fd5f 	bl	80001d8 <main>
  bx lr
 800071a:	4770      	bx	lr
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000724:	080047f4 	.word	0x080047f4
  ldr r2, =_sbss
 8000728:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800072c:	2000123c 	.word	0x2000123c

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f8d1 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	200f      	movs	r0, #15
 800074c:	f7ff feee 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff fe68 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a03      	ldr	r2, [pc, #12]	@ (8000780 <HAL_IncTick+0x20>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000008 	.word	0x20000008
 8000780:	2000039c 	.word	0x2000039c

08000784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	2000039c 	.word	0x2000039c

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4906      	ldr	r1, [pc, #24]	@ (8000830 <__NVIC_EnableIRQ+0x34>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	@ (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	@ (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	@ 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff4f 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff64 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ffb2 	bl	8000888 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff81 	bl	8000834 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff57 	bl	80007fc <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	@ (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	@ (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492c      	ldr	r1, [pc, #176]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4922      	ldr	r1, [pc, #136]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4918      	ldr	r1, [pc, #96]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	@ 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e272      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8087 	beq.w	8000d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c80:	4b92      	ldr	r3, [pc, #584]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d00c      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d112      	bne.n	8000cbe <HAL_RCC_OscConfig+0x5e>
 8000c98:	4b8c      	ldr	r3, [pc, #560]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ca4:	d10b      	bne.n	8000cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca6:	4b89      	ldr	r3, [pc, #548]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d06c      	beq.n	8000d8c <HAL_RCC_OscConfig+0x12c>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d168      	bne.n	8000d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e24c      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cc6:	d106      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x76>
 8000cc8:	4b80      	ldr	r3, [pc, #512]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a7f      	ldr	r2, [pc, #508]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e02e      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x98>
 8000cde:	4b7b      	ldr	r3, [pc, #492]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b78      	ldr	r3, [pc, #480]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a77      	ldr	r2, [pc, #476]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e01d      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0xbc>
 8000d02:	4b72      	ldr	r3, [pc, #456]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a71      	ldr	r2, [pc, #452]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a6e      	ldr	r2, [pc, #440]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e00b      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a6a      	ldr	r2, [pc, #424]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b68      	ldr	r3, [pc, #416]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a67      	ldr	r2, [pc, #412]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fd22 	bl	8000784 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fd1e 	bl	8000784 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	@ 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e200      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f0      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe4>
 8000d62:	e014      	b.n	8000d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fd0e 	bl	8000784 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fd0a 	bl	8000784 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	@ 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e1ec      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	4b53      	ldr	r3, [pc, #332]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x10c>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d063      	beq.n	8000e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da6:	4b49      	ldr	r3, [pc, #292]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d11c      	bne.n	8000dec <HAL_RCC_OscConfig+0x18c>
 8000db2:	4b46      	ldr	r3, [pc, #280]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d116      	bne.n	8000dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x176>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1c0      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4939      	ldr	r1, [pc, #228]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	e03a      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d020      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df4:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <HAL_RCC_OscConfig+0x270>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fcc3 	bl	8000784 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e02:	f7ff fcbf 	bl	8000784 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e1a1      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4927      	ldr	r1, [pc, #156]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_RCC_OscConfig+0x270>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fca2 	bl	8000784 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc9e 	bl	8000784 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e180      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03a      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d019      	beq.n	8000eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc82 	bl	8000784 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc7e 	bl	8000784 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e160      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 fafe 	bl	80014a4 <RCC_Delay>
 8000ea8:	e01c      	b.n	8000ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc68 	bl	8000784 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb6:	e00f      	b.n	8000ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc64 	bl	8000784 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d908      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e146      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	42420000 	.word	0x42420000
 8000ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed8:	4b92      	ldr	r3, [pc, #584]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e9      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80a6 	beq.w	800103e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10d      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a87      	ldr	r2, [pc, #540]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b82      	ldr	r3, [pc, #520]	@ (8001128 <HAL_RCC_OscConfig+0x4c8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001128 <HAL_RCC_OscConfig+0x4c8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001128 <HAL_RCC_OscConfig+0x4c8>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fc25 	bl	8000784 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3e:	f7ff fc21 	bl	8000784 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	@ 0x64
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e103      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	4b75      	ldr	r3, [pc, #468]	@ (8001128 <HAL_RCC_OscConfig+0x4c8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x312>
 8000f64:	4b6f      	ldr	r3, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4a6e      	ldr	r2, [pc, #440]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6213      	str	r3, [r2, #32]
 8000f70:	e02d      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x334>
 8000f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a69      	ldr	r2, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	4b67      	ldr	r3, [pc, #412]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a66      	ldr	r2, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	e01c      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x356>
 8000f9c:	4b61      	ldr	r3, [pc, #388]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a60      	ldr	r2, [pc, #384]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a5d      	ldr	r2, [pc, #372]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	e00b      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4a5a      	ldr	r2, [pc, #360]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	6213      	str	r3, [r2, #32]
 8000fc2:	4b58      	ldr	r3, [pc, #352]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a57      	ldr	r2, [pc, #348]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	f023 0304 	bic.w	r3, r3, #4
 8000fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d015      	beq.n	8001002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fbd5 	bl	8000784 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fdc:	e00a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff fbd1 	bl	8000784 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e0b1      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0ee      	beq.n	8000fde <HAL_RCC_OscConfig+0x37e>
 8001000:	e014      	b.n	800102c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fbbf 	bl	8000784 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001008:	e00a      	b.n	8001020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fbbb 	bl	8000784 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e09b      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1ee      	bne.n	800100a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001032:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a3b      	ldr	r2, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8087 	beq.w	8001156 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001048:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d061      	beq.n	8001118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d146      	bne.n	80010ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105c:	4b33      	ldr	r3, [pc, #204]	@ (800112c <HAL_RCC_OscConfig+0x4cc>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fb8f 	bl	8000784 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fb8b 	bl	8000784 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e06d      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001090:	d108      	bne.n	80010a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001092:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	4921      	ldr	r1, [pc, #132]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a19      	ldr	r1, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	430b      	orrs	r3, r1
 80010b6:	491b      	ldr	r1, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb5f 	bl	8000784 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fb5b 	bl	8000784 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e03d      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x46a>
 80010e8:	e035      	b.n	8001156 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb48 	bl	8000784 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff fb44 	bl	8000784 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e026      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x498>
 8001116:	e01e      	b.n	8001156 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d107      	bne.n	8001130 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e019      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
 8001124:	40021000 	.word	0x40021000
 8001128:	40007000 	.word	0x40007000
 800112c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_RCC_OscConfig+0x500>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	429a      	cmp	r2, r3
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0d0      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b6a      	ldr	r3, [pc, #424]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d910      	bls.n	80011a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b67      	ldr	r3, [pc, #412]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0207 	bic.w	r2, r3, #7
 800118e:	4965      	ldr	r1, [pc, #404]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0b8      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c0:	4b59      	ldr	r3, [pc, #356]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a58      	ldr	r2, [pc, #352]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d8:	4b53      	ldr	r3, [pc, #332]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e4:	4b50      	ldr	r3, [pc, #320]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	494d      	ldr	r1, [pc, #308]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d040      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d115      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e07f      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	4b41      	ldr	r3, [pc, #260]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e073      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4b3d      	ldr	r3, [pc, #244]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06b      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001242:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 0203 	bic.w	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4936      	ldr	r1, [pc, #216]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff fa96 	bl	8000784 <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	e00a      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125c:	f7ff fa92 	bl	8000784 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e053      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 020c 	and.w	r2, r3, #12
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1eb      	bne.n	800125c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001284:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d210      	bcs.n	80012b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 0207 	bic.w	r2, r3, #7
 800129a:	4922      	ldr	r1, [pc, #136]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e032      	b.n	800131a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4916      	ldr	r1, [pc, #88]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	490e      	ldr	r1, [pc, #56]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012f2:	f000 f821 	bl	8001338 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <HAL_RCC_ClockConfig+0x1c8>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <HAL_RCC_ClockConfig+0x1cc>)
 800130c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_RCC_ClockConfig+0x1d0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f90a 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000
 8001328:	40021000 	.word	0x40021000
 800132c:	0800478c 	.word	0x0800478c
 8001330:	20000000 	.word	0x20000000
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d002      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x30>
 8001362:	2b08      	cmp	r3, #8
 8001364:	d003      	beq.n	800136e <HAL_RCC_GetSysClockFreq+0x36>
 8001366:	e027      	b.n	80013b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800136a:	613b      	str	r3, [r7, #16]
      break;
 800136c:	e027      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d010      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	0c5b      	lsrs	r3, r3, #17
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800139a:	fb03 f202 	mul.w	r2, r3, r2
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e004      	b.n	80013b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	613b      	str	r3, [r7, #16]
      break;
 80013b6:	e002      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ba:	613b      	str	r3, [r7, #16]
      break;
 80013bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013be:	693b      	ldr	r3, [r7, #16]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	007a1200 	.word	0x007a1200
 80013d4:	080047a4 	.word	0x080047a4
 80013d8:	080047b4 	.word	0x080047b4
 80013dc:	003d0900 	.word	0x003d0900

080013e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e4:	4b02      	ldr	r3, [pc, #8]	@ (80013f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f8:	f7ff fff2 	bl	80013e0 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	@ (8001418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	0800479c 	.word	0x0800479c

0800141c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001420:	f7ff ffde 	bl	80013e0 <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0adb      	lsrs	r3, r3, #11
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4903      	ldr	r1, [pc, #12]	@ (8001440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	0800479c 	.word	0x0800479c

08001444 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	220f      	movs	r2, #15
 8001452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_RCC_GetClockConfig+0x58>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_RCC_GetClockConfig+0x58>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_RCC_GetClockConfig+0x58>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_RCC_GetClockConfig+0x58>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0207 	and.w	r2, r3, #7
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000
 80014a0:	40022000 	.word	0x40022000

080014a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <RCC_Delay+0x34>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <RCC_Delay+0x38>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0a5b      	lsrs	r3, r3, #9
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c0:	bf00      	nop
  }
  while (Delay --);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	60fa      	str	r2, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <RCC_Delay+0x1c>
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000000 	.word	0x20000000
 80014dc:	10624dd3 	.word	0x10624dd3

080014e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e041      	b.n	8001576 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f839 	bl	800157e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2202      	movs	r2, #2
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3304      	adds	r3, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f000 f99c 	bl	800185c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d001      	beq.n	80015a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e03a      	b.n	800161e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <HAL_TIM_Base_Start_IT+0x98>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00e      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x58>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d2:	d009      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x58>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_TIM_Base_Start_IT+0x9c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x58>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <HAL_TIM_Base_Start_IT+0xa0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d111      	bne.n	800160c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d010      	beq.n	800161c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800160a:	e007      	b.n	800161c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40012c00 	.word	0x40012c00
 800162c:	40000400 	.word	0x40000400
 8001630:	40000800 	.word	0x40000800

08001634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d020      	beq.n	8001698 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0202 	mvn.w	r2, #2
 8001668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8d1 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 8001684:	e005      	b.n	8001692 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8c4 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8d3 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d020      	beq.n	80016e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0204 	mvn.w	r2, #4
 80016b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8ab 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 80016d0:	e005      	b.n	80016de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f89e 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8ad 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01b      	beq.n	8001730 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0208 	mvn.w	r2, #8
 8001700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2204      	movs	r2, #4
 8001706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f885 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 800171c:	e005      	b.n	800172a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f878 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f887 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d020      	beq.n	800177c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01b      	beq.n	800177c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0210 	mvn.w	r2, #16
 800174c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2208      	movs	r2, #8
 8001752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f85f 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 8001768:	e005      	b.n	8001776 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f852 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f861 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0201 	mvn.w	r2, #1
 8001798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fe2a 	bl	80003f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00c      	beq.n	80017c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8c3 	bl	800194a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f831 	bl	800184a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0220 	mvn.w	r2, #32
 8001804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f896 	bl	8001938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <TIM_Base_SetConfig+0xd0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00b      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187a:	d007      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a2c      	ldr	r2, [pc, #176]	@ (8001930 <TIM_Base_SetConfig+0xd4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a2b      	ldr	r2, [pc, #172]	@ (8001934 <TIM_Base_SetConfig+0xd8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a22      	ldr	r2, [pc, #136]	@ (800192c <TIM_Base_SetConfig+0xd0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00b      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ac:	d007      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <TIM_Base_SetConfig+0xd4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d003      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <TIM_Base_SetConfig+0xd8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <TIM_Base_SetConfig+0xd0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d103      	bne.n	8001904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f023 0201 	bic.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
  }
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800

08001938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e042      	b.n	80019f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fd86 	bl	8000494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	@ 0x24
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800199e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f971 	bl	8001c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d175      	bne.n	8001b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_UART_Transmit+0x2c>
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e06e      	b.n	8001b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2221      	movs	r2, #33	@ 0x21
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3a:	f7fe fea3 	bl	8000784 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a54:	d108      	bne.n	8001a68 <HAL_UART_Transmit+0x6c>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d104      	bne.n	8001a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	e003      	b.n	8001a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a70:	e02e      	b.n	8001ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f848 	bl	8001b12 <UART_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03a      	b.n	8001b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10b      	bne.n	8001ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	3302      	adds	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	e007      	b.n	8001ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1cb      	bne.n	8001a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2140      	movs	r1, #64	@ 0x40
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f814 	bl	8001b12 <UART_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e006      	b.n	8001b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b22:	e03b      	b.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2a:	d037      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	f7fe fe2a 	bl	8000784 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	6a3a      	ldr	r2, [r7, #32]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d302      	bcc.n	8001b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e03a      	b.n	8001bbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d023      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b80      	cmp	r3, #128	@ 0x80
 8001b58:	d020      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b40      	cmp	r3, #64	@ 0x40
 8001b5e:	d01d      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d116      	bne.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f81d 	bl	8001bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00f      	b.n	8001bbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d0b4      	beq.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b095      	sub	sp, #84	@ 0x54
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd6:	e853 3f00 	ldrex	r3, [r3]
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	330c      	adds	r3, #12
 8001bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bec:	643a      	str	r2, [r7, #64]	@ 0x40
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bf4:	e841 2300 	strex	r3, r2, [r1]
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e5      	bne.n	8001bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3314      	adds	r3, #20
 8001c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	e853 3f00 	ldrex	r3, [r3]
 8001c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c28:	e841 2300 	strex	r3, r2, [r1]
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e5      	bne.n	8001c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d119      	bne.n	8001c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	e853 3f00 	ldrex	r3, [r3]
 8001c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f023 0310 	bic.w	r3, r3, #16
 8001c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c5c:	61ba      	str	r2, [r7, #24]
 8001c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	e841 2300 	strex	r3, r2, [r1]
 8001c68:	613b      	str	r3, [r7, #16]
   return(result);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e5      	bne.n	8001c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c7e:	bf00      	nop
 8001c80:	3754      	adds	r7, #84	@ 0x54
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001cc2:	f023 030c 	bic.w	r3, r3, #12
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <UART_SetConfig+0x114>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cf0:	f7ff fb94 	bl	800141c <HAL_RCC_GetPCLK2Freq>
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	e002      	b.n	8001cfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f7ff fb7c 	bl	80013f4 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009a      	lsls	r2, r3, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4a22      	ldr	r2, [pc, #136]	@ (8001da0 <UART_SetConfig+0x118>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	0119      	lsls	r1, r3, #4
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009a      	lsls	r2, r3, #2
 8001d28:	441a      	add	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <UART_SetConfig+0x118>)
 8001d36:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2064      	movs	r0, #100	@ 0x64
 8001d3e:	fb00 f303 	mul.w	r3, r0, r3
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	3332      	adds	r3, #50	@ 0x32
 8001d48:	4a15      	ldr	r2, [pc, #84]	@ (8001da0 <UART_SetConfig+0x118>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d54:	4419      	add	r1, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009a      	lsls	r2, r3, #2
 8001d60:	441a      	add	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <UART_SetConfig+0x118>)
 8001d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2064      	movs	r0, #100	@ 0x64
 8001d76:	fb00 f303 	mul.w	r3, r0, r3
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	3332      	adds	r3, #50	@ 0x32
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <UART_SetConfig+0x118>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	440a      	add	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	51eb851f 	.word	0x51eb851f

08001da4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	2b84      	cmp	r3, #132	@ 0x84
 8001db8:	d005      	beq.n	8001dc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3303      	adds	r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001dd6:	f000 ff11 	bl	8002bfc <vTaskStartScheduler>
  
  return osOK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <osThreadCreate+0x54>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01c      	beq.n	8001e34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685c      	ldr	r4, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691e      	ldr	r6, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffc9 	bl	8001da4 <makeFreeRtosPriority>
 8001e12:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e1c:	9202      	str	r2, [sp, #8]
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	9100      	str	r1, [sp, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4632      	mov	r2, r6
 8001e26:	4629      	mov	r1, r5
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f000 fd19 	bl	8002860 <xTaskCreateStatic>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e01c      	b.n	8001e6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685c      	ldr	r4, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e40:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ffab 	bl	8001da4 <makeFreeRtosPriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f000 fd5e 	bl	8002920 <xTaskCreate>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <osDelay+0x16>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	e000      	b.n	8001e90 <osDelay+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fe7d 	bl	8002b90 <vTaskDelay>
  
  return osOK;
 8001e96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 fae1 	bl	800247e <xQueueCreateMutexStatic>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	e003      	b.n	8001ec8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f000 fac4 	bl	800244e <xQueueCreateMutex>
 8001ec6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	3303      	adds	r3, #3
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8001ee4:	2014      	movs	r0, #20
 8001ee6:	f001 fd53 	bl	8003990 <pvPortMalloc>
 8001eea:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d046      	beq.n	8001f80 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fd40 	bl	8003990 <pvPortMalloc>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02b      	beq.n	8001f76 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fd31 	bl	8003990 <pvPortMalloc>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d011      	beq.n	8001f60 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e008      	b.n	8001f54 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3301      	adds	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3f1      	bcc.n	8001f42 <osPoolCreate+0x72>
 8001f5e:	e00f      	b.n	8001f80 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fde1 	bl	8003b2c <vPortFree>
        vPortFree(thePool);
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f001 fdde 	bl	8003b2c <vPortFree>
        thePool = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e004      	b.n	8001f80 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f001 fdd8 	bl	8003b2c <vPortFree>
      thePool = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8001f80:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8001f8a:	b590      	push	{r4, r7, lr}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689c      	ldr	r4, [r3, #8]
 8001fa8:	200c      	movs	r0, #12
 8001faa:	f001 fcf1 	bl	8003990 <pvPortMalloc>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <osMailCreate+0x36>
    return NULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e038      	b.n	8002032 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	f000 f9c5 	bl	8002366 <xQueueGenericCreate>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 fd9a 	bl	8003b2c <vPortFree>
    return NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e01a      	b.n	8002032 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff62 	bl	8001ed0 <osPoolCreate>
 800200c:	4603      	mov	r3, r0
 800200e:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f001 fd82 	bl	8003b2c <vPortFree>
    return NULL;
 8002028:	2300      	movs	r3, #0
 800202a:	e002      	b.n	8002032 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002032:	4618      	mov	r0, r3
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}

0800203a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f103 0208 	add.w	r2, r3, #8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f04f 32ff 	mov.w	r2, #4294967295
 8002052:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0208 	add.w	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0208 	add.w	r2, r3, #8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <vListInsert+0x2e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d2f6      	bcs.n	80020fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6892      	ldr	r2, [r2, #8]
 800215c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6852      	ldr	r2, [r2, #4]
 8002166:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d103      	bne.n	800217a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021c4:	f001 fb22 	bl	800380c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	441a      	add	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	3b01      	subs	r3, #1
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	441a      	add	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	22ff      	movs	r2, #255	@ 0xff
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d114      	bne.n	8002244 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01a      	beq.n	8002258 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3310      	adds	r3, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff32 	bl	8003090 <xTaskRemoveFromEventList>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <xQueueGenericReset+0xd0>)
 8002234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	e009      	b.n	8002258 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3310      	adds	r3, #16
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fef6 	bl	800203a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3324      	adds	r3, #36	@ 0x24
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fef1 	bl	800203a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002258:	f001 fb08 	bl	800386c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	@ 0x38
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10b      	bne.n	80022b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	e7fd      	b.n	80022b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <xQueueGenericCreateStatic+0x56>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <xQueueGenericCreateStatic+0x5a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <xQueueGenericCreateStatic+0x5c>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	623b      	str	r3, [r7, #32]
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <xQueueGenericCreateStatic+0x84>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <xQueueGenericCreateStatic+0x88>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <xQueueGenericCreateStatic+0x8a>
 80022f4:	2300      	movs	r3, #0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80022fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	61fb      	str	r3, [r7, #28]
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	e7fd      	b.n	800230e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002312:	2348      	movs	r3, #72	@ 0x48
 8002314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b48      	cmp	r3, #72	@ 0x48
 800231a:	d00b      	beq.n	8002334 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	61bb      	str	r3, [r7, #24]
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002334:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002348:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f840 	bl	80023dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800235e:	4618      	mov	r0, r3
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002366:	b580      	push	{r7, lr}
 8002368:	b08a      	sub	sp, #40	@ 0x28
 800236a:	af02      	add	r7, sp, #8
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <xQueueGenericCreate+0x2c>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	613b      	str	r3, [r7, #16]
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3348      	adds	r3, #72	@ 0x48
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 faf5 	bl	8003990 <pvPortMalloc>
 80023a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d011      	beq.n	80023d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3348      	adds	r3, #72	@ 0x48
 80023b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c0:	79fa      	ldrb	r2, [r7, #7]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f805 	bl	80023dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023d2:	69bb      	ldr	r3, [r7, #24]
	}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e002      	b.n	80023fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800240a:	2101      	movs	r1, #1
 800240c:	69b8      	ldr	r0, [r7, #24]
 800240e:	f7ff fec3 	bl	8002198 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f837 	bl	80024b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	461a      	mov	r2, r3
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff7d 	bl	8002366 <xQueueGenericCreate>
 800246c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff ffd3 	bl	800241a <prvInitialiseMutex>

		return xNewQueue;
 8002474:	68fb      	ldr	r3, [r7, #12]
	}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800247e:	b580      	push	{r7, lr}
 8002480:	b088      	sub	sp, #32
 8002482:	af02      	add	r7, sp, #8
 8002484:	4603      	mov	r3, r0
 8002486:	6039      	str	r1, [r7, #0]
 8002488:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	6939      	ldr	r1, [r7, #16]
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f7ff fee5 	bl	800226c <xQueueGenericCreateStatic>
 80024a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ffb8 	bl	800241a <prvInitialiseMutex>

		return xNewQueue;
 80024aa:	68fb      	ldr	r3, [r7, #12]
	}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	@ 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <xQueueGenericSend+0x34>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <xQueueGenericSend+0x42>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0x46>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0x48>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <xQueueGenericSend+0x64>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d103      	bne.n	8002526 <xQueueGenericSend+0x72>
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <xQueueGenericSend+0x76>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueGenericSend+0x78>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <xQueueGenericSend+0x94>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	623b      	str	r3, [r7, #32]
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002548:	f000 ff62 	bl	8003410 <xTaskGetSchedulerState>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <xQueueGenericSend+0xa4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <xQueueGenericSend+0xa8>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <xQueueGenericSend+0xaa>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <xQueueGenericSend+0xc6>
	__asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	61fb      	str	r3, [r7, #28]
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800257a:	f001 f947 	bl	800380c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <xQueueGenericSend+0xdc>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d129      	bne.n	80025e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002596:	f000 f88f 	bl	80026b8 <prvCopyDataToQueue>
 800259a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	3324      	adds	r3, #36	@ 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd71 	bl	8003090 <xTaskRemoveFromEventList>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025b4:	4b3f      	ldr	r3, [pc, #252]	@ (80026b4 <xQueueGenericSend+0x200>)
 80025b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	e00a      	b.n	80025dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025cc:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <xQueueGenericSend+0x200>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025dc:	f001 f946 	bl	800386c <vPortExitCritical>
				return pdPASS;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e063      	b.n	80026ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025ea:	f001 f93f 	bl	800386c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e05c      	b.n	80026ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fdab 	bl	8003158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002602:	2301      	movs	r3, #1
 8002604:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002606:	f001 f931 	bl	800386c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800260a:	f000 fb59 	bl	8002cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800260e:	f001 f8fd 	bl	800380c <vPortEnterCritical>
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d103      	bne.n	8002628 <xQueueGenericSend+0x174>
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800262e:	b25b      	sxtb	r3, r3
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d103      	bne.n	800263e <xQueueGenericSend+0x18a>
 8002636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800263e:	f001 f915 	bl	800386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002642:	1d3a      	adds	r2, r7, #4
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fd9a 	bl	8003184 <xTaskCheckForTimeOut>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d124      	bne.n	80026a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002658:	f000 f8ea 	bl	8002830 <prvIsQueueFull>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d018      	beq.n	8002694 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	3310      	adds	r3, #16
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fcea 	bl	8003044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002672:	f000 f88b 	bl	800278c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002676:	f000 fb31 	bl	8002cdc <xTaskResumeAll>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af7c 	bne.w	800257a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <xQueueGenericSend+0x200>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	e772      	b.n	800257a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002696:	f000 f879 	bl	800278c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800269a:	f000 fb1f 	bl	8002cdc <xTaskResumeAll>
 800269e:	e76c      	b.n	800257a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a2:	f000 f873 	bl	800278c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026a6:	f000 fb19 	bl	8002cdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3738      	adds	r7, #56	@ 0x38
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d14d      	bne.n	800277a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 feb2 	bl	800344c <xTaskPriorityDisinherit>
 80026e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e043      	b.n	800277a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d119      	bne.n	800272c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6858      	ldr	r0, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	461a      	mov	r2, r3
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	f001 fba0 	bl	8003e48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	441a      	add	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d32b      	bcc.n	800277a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	e026      	b.n	800277a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68d8      	ldr	r0, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	461a      	mov	r2, r3
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	f001 fb86 	bl	8003e48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	425b      	negs	r3, r3
 8002746:	441a      	add	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	425b      	negs	r3, r3
 8002762:	441a      	add	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d105      	bne.n	800277a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3b01      	subs	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002782:	697b      	ldr	r3, [r7, #20]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002794:	f001 f83a 	bl	800380c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800279e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a0:	e011      	b.n	80027c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3324      	adds	r3, #36	@ 0x24
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fc6e 	bl	8003090 <xTaskRemoveFromEventList>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027ba:	f000 fd47 	bl	800324c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	dce9      	bgt.n	80027a2 <prvUnlockQueue+0x16>
 80027ce:	e000      	b.n	80027d2 <prvUnlockQueue+0x46>
					break;
 80027d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	22ff      	movs	r2, #255	@ 0xff
 80027d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027da:	f001 f847 	bl	800386c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027de:	f001 f815 	bl	800380c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ea:	e011      	b.n	8002810 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3310      	adds	r3, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fc49 	bl	8003090 <xTaskRemoveFromEventList>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002804:	f000 fd22 	bl	800324c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	3b01      	subs	r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002814:	2b00      	cmp	r3, #0
 8002816:	dce9      	bgt.n	80027ec <prvUnlockQueue+0x60>
 8002818:	e000      	b.n	800281c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800281a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	22ff      	movs	r2, #255	@ 0xff
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002824:	f001 f822 	bl	800386c <vPortExitCritical>
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002838:	f000 ffe8 	bl	800380c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002844:	429a      	cmp	r2, r3
 8002846:	d102      	bne.n	800284e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e001      	b.n	8002852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002852:	f001 f80b 	bl	800386c <vPortExitCritical>

	return xReturn;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	@ 0x38
 8002864:	af04      	add	r7, sp, #16
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800286e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	623b      	str	r3, [r7, #32]
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800288c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	61fb      	str	r3, [r7, #28]
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	e7fd      	b.n	80028a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028aa:	2354      	movs	r3, #84	@ 0x54
 80028ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b54      	cmp	r3, #84	@ 0x54
 80028b2:	d00b      	beq.n	80028cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61bb      	str	r3, [r7, #24]
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01e      	beq.n	8002912 <xTaskCreateStatic+0xb2>
 80028d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01b      	beq.n	8002912 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028ec:	2300      	movs	r3, #0
 80028ee:	9303      	str	r3, [sp, #12]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f850 	bl	80029aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800290a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800290c:	f000 f8d6 	bl	8002abc <prvAddNewTaskToReadyList>
 8002910:	e001      	b.n	8002916 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002916:	697b      	ldr	r3, [r7, #20]
	}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	@ 0x30
 8002924:	af04      	add	r7, sp, #16
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f001 f82b 	bl	8003990 <pvPortMalloc>
 800293a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002942:	2054      	movs	r0, #84	@ 0x54
 8002944:	f001 f824 	bl	8003990 <pvPortMalloc>
 8002948:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30
 8002956:	e005      	b.n	8002964 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002958:	6978      	ldr	r0, [r7, #20]
 800295a:	f001 f8e7 	bl	8003b2c <vPortFree>
 800295e:	e001      	b.n	8002964 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d017      	beq.n	800299a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	2300      	movs	r3, #0
 8002976:	9303      	str	r3, [sp, #12]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f80e 	bl	80029aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298e:	69f8      	ldr	r0, [r7, #28]
 8002990:	f000 f894 	bl	8002abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002994:	2301      	movs	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e002      	b.n	80029a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029a0:	69bb      	ldr	r3, [r7, #24]
	}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029c2:	3b01      	subs	r3, #1
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f023 0307 	bic.w	r3, r3, #7
 80029d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	617b      	str	r3, [r7, #20]
}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01f      	beq.n	8002a3a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e012      	b.n	8002a26 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	7819      	ldrb	r1, [r3, #0]
 8002a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3334      	adds	r3, #52	@ 0x34
 8002a10:	460a      	mov	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d9e9      	bls.n	8002a00 <prvInitialiseNewTask+0x56>
 8002a2c:	e000      	b.n	8002a30 <prvInitialiseNewTask+0x86>
			{
				break;
 8002a2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a38:	e003      	b.n	8002a42 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d901      	bls.n	8002a4c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a48:	2306      	movs	r3, #6
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a56:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	3304      	adds	r3, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fb08 	bl	8002078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb03 	bl	8002078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	f1c3 0207 	rsb	r2, r3, #7
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	69b8      	ldr	r0, [r7, #24]
 8002a9c:	f000 fdc4 	bl	8003628 <pxPortInitialiseStack>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab2:	bf00      	nop
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ac4:	f000 fea2 	bl	800380c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <prvAddNewTaskToReadyList+0xb8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <prvAddNewTaskToReadyList+0xb8>)
 8002ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ad2:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <prvAddNewTaskToReadyList+0xbc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ada:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <prvAddNewTaskToReadyList+0xbc>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <prvAddNewTaskToReadyList+0xb8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d110      	bne.n	8002b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ae8:	f000 fbd4 	bl	8003294 <prvInitialiseTaskLists>
 8002aec:	e00d      	b.n	8002b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <prvAddNewTaskToReadyList+0xc0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <prvAddNewTaskToReadyList+0xbc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d802      	bhi.n	8002b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b04:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <prvAddNewTaskToReadyList+0xbc>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <prvAddNewTaskToReadyList+0xc4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <prvAddNewTaskToReadyList+0xc4>)
 8002b12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <prvAddNewTaskToReadyList+0xc8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <prvAddNewTaskToReadyList+0xc8>)
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <prvAddNewTaskToReadyList+0xcc>)
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7ff faa7 	bl	8002090 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b42:	f000 fe93 	bl	800386c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <prvAddNewTaskToReadyList+0xc0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <prvAddNewTaskToReadyList+0xbc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d207      	bcs.n	8002b6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <prvAddNewTaskToReadyList+0xd0>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200004a0 	.word	0x200004a0
 8002b78:	200003a0 	.word	0x200003a0
 8002b7c:	200004ac 	.word	0x200004ac
 8002b80:	200004bc 	.word	0x200004bc
 8002b84:	200004a8 	.word	0x200004a8
 8002b88:	200003a4 	.word	0x200003a4
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d018      	beq.n	8002bd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <vTaskDelay+0x64>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <vTaskDelay+0x32>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	60bb      	str	r3, [r7, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bc2:	f000 f87d 	bl	8002cc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fcc7 	bl	800355c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bce:	f000 f885 	bl	8002cdc <xTaskResumeAll>
 8002bd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d107      	bne.n	8002bea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <vTaskDelay+0x68>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200004c8 	.word	0x200004c8
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c0a:	463a      	mov	r2, r7
 8002c0c:	1d39      	adds	r1, r7, #4
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fa9c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	9202      	str	r2, [sp, #8]
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	460a      	mov	r2, r1
 8002c2a:	491f      	ldr	r1, [pc, #124]	@ (8002ca8 <vTaskStartScheduler+0xac>)
 8002c2c:	481f      	ldr	r0, [pc, #124]	@ (8002cac <vTaskStartScheduler+0xb0>)
 8002c2e:	f7ff fe17 	bl	8002860 <xTaskCreateStatic>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <vTaskStartScheduler+0xb4>)
 8002c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <vTaskStartScheduler+0xb4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e001      	b.n	8002c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d116      	bne.n	8002c7e <vTaskStartScheduler+0x82>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	613b      	str	r3, [r7, #16]
}
 8002c62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <vTaskStartScheduler+0xb8>)
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <vTaskStartScheduler+0xbc>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <vTaskStartScheduler+0xc0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c78:	f000 fd56 	bl	8003728 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c7c:	e00f      	b.n	8002c9e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d10b      	bne.n	8002c9e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	60fb      	str	r3, [r7, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <vTaskStartScheduler+0x9e>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	08004784 	.word	0x08004784
 8002cac:	08003265 	.word	0x08003265
 8002cb0:	200004c4 	.word	0x200004c4
 8002cb4:	200004c0 	.word	0x200004c0
 8002cb8:	200004ac 	.word	0x200004ac
 8002cbc:	200004a4 	.word	0x200004a4

08002cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <vTaskSuspendAll+0x18>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a03      	ldr	r2, [pc, #12]	@ (8002cd8 <vTaskSuspendAll+0x18>)
 8002ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200004c8 	.word	0x200004c8

08002cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cea:	4b42      	ldr	r3, [pc, #264]	@ (8002df4 <xTaskResumeAll+0x118>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <xTaskResumeAll+0x2e>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	603b      	str	r3, [r7, #0]
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d0a:	f000 fd7f 	bl	800380c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <xTaskResumeAll+0x118>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4a37      	ldr	r2, [pc, #220]	@ (8002df4 <xTaskResumeAll+0x118>)
 8002d16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <xTaskResumeAll+0x118>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d161      	bne.n	8002de4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d20:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <xTaskResumeAll+0x11c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05d      	beq.n	8002de4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d28:	e02e      	b.n	8002d88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2a:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <xTaskResumeAll+0x120>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3318      	adds	r3, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fa05 	bl	8002146 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fa00 	bl	8002146 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <xTaskResumeAll+0x124>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	4a2a      	ldr	r2, [pc, #168]	@ (8002e00 <xTaskResumeAll+0x124>)
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <xTaskResumeAll+0x128>)
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7ff f98e 	bl	8002090 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <xTaskResumeAll+0x12c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d82:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <xTaskResumeAll+0x130>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d88:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <xTaskResumeAll+0x120>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1cc      	bne.n	8002d2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d96:	f000 fb1b 	bl	80033d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <xTaskResumeAll+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002da6:	f000 f837 	bl	8002e18 <xTaskIncrementTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002db0:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <xTaskResumeAll+0x130>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f1      	bne.n	8002da6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <xTaskResumeAll+0x134>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dc8:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <xTaskResumeAll+0x130>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d009      	beq.n	8002de4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <xTaskResumeAll+0x138>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002de4:	f000 fd42 	bl	800386c <vPortExitCritical>

	return xAlreadyYielded;
 8002de8:	68bb      	ldr	r3, [r7, #8]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200004c8 	.word	0x200004c8
 8002df8:	200004a0 	.word	0x200004a0
 8002dfc:	20000460 	.word	0x20000460
 8002e00:	200004a8 	.word	0x200004a8
 8002e04:	200003a4 	.word	0x200003a4
 8002e08:	200003a0 	.word	0x200003a0
 8002e0c:	200004b4 	.word	0x200004b4
 8002e10:	200004b0 	.word	0x200004b0
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e22:	4b4f      	ldr	r3, [pc, #316]	@ (8002f60 <xTaskIncrementTick+0x148>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 808f 	bne.w	8002f4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f64 <xTaskIncrementTick+0x14c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e34:	4a4b      	ldr	r2, [pc, #300]	@ (8002f64 <xTaskIncrementTick+0x14c>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d121      	bne.n	8002e84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e40:	4b49      	ldr	r3, [pc, #292]	@ (8002f68 <xTaskIncrementTick+0x150>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <xTaskIncrementTick+0x46>
 8002e62:	4b41      	ldr	r3, [pc, #260]	@ (8002f68 <xTaskIncrementTick+0x150>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <xTaskIncrementTick+0x154>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f68 <xTaskIncrementTick+0x150>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4a3e      	ldr	r2, [pc, #248]	@ (8002f6c <xTaskIncrementTick+0x154>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <xTaskIncrementTick+0x158>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f70 <xTaskIncrementTick+0x158>)
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	f000 faa6 	bl	80033d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e84:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <xTaskIncrementTick+0x15c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d348      	bcc.n	8002f20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e8e:	4b36      	ldr	r3, [pc, #216]	@ (8002f68 <xTaskIncrementTick+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e98:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <xTaskIncrementTick+0x15c>)
 8002e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9e:	601a      	str	r2, [r3, #0]
					break;
 8002ea0:	e03e      	b.n	8002f20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <xTaskIncrementTick+0x150>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d203      	bcs.n	8002ec2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eba:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <xTaskIncrementTick+0x15c>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ec0:	e02e      	b.n	8002f20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f93d 	bl	8002146 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f934 	bl	8002146 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <xTaskIncrementTick+0x160>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <xTaskIncrementTick+0x160>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <xTaskIncrementTick+0x164>)
 8002efe:	441a      	add	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff f8c2 	bl	8002090 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f10:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <xTaskIncrementTick+0x168>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3b9      	bcc.n	8002e8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1e:	e7b6      	b.n	8002e8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f20:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <xTaskIncrementTick+0x168>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	4915      	ldr	r1, [pc, #84]	@ (8002f7c <xTaskIncrementTick+0x164>)
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d901      	bls.n	8002f3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <xTaskIncrementTick+0x16c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e004      	b.n	8002f54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <xTaskIncrementTick+0x170>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <xTaskIncrementTick+0x170>)
 8002f52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f54:	697b      	ldr	r3, [r7, #20]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200004c8 	.word	0x200004c8
 8002f64:	200004a4 	.word	0x200004a4
 8002f68:	20000458 	.word	0x20000458
 8002f6c:	2000045c 	.word	0x2000045c
 8002f70:	200004b8 	.word	0x200004b8
 8002f74:	200004c0 	.word	0x200004c0
 8002f78:	200004a8 	.word	0x200004a8
 8002f7c:	200003a4 	.word	0x200003a4
 8002f80:	200003a0 	.word	0x200003a0
 8002f84:	200004b4 	.word	0x200004b4
 8002f88:	200004b0 	.word	0x200004b0

08002f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f92:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <vTaskSwitchContext+0xa4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <vTaskSwitchContext+0xa8>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fa0:	e040      	b.n	8003024 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002fa2:	4b24      	ldr	r3, [pc, #144]	@ (8003034 <vTaskSwitchContext+0xa8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa8:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <vTaskSwitchContext+0xac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	f1c3 031f 	rsb	r3, r3, #31
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	491f      	ldr	r1, [pc, #124]	@ (800303c <vTaskSwitchContext+0xb0>)
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <vTaskSwitchContext+0x5e>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <vTaskSwitchContext+0x5a>
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4a11      	ldr	r2, [pc, #68]	@ (800303c <vTaskSwitchContext+0xb0>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3308      	adds	r3, #8
 800300c:	429a      	cmp	r2, r3
 800300e:	d104      	bne.n	800301a <vTaskSwitchContext+0x8e>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a07      	ldr	r2, [pc, #28]	@ (8003040 <vTaskSwitchContext+0xb4>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	200004c8 	.word	0x200004c8
 8003034:	200004b4 	.word	0x200004b4
 8003038:	200004a8 	.word	0x200004a8
 800303c:	200003a4 	.word	0x200003a4
 8003040:	200003a0 	.word	0x200003a0

08003044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	60fb      	str	r3, [r7, #12]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <vTaskPlaceOnEventList+0x48>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3318      	adds	r3, #24
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff f82e 	bl	80020d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800307a:	2101      	movs	r1, #1
 800307c:	6838      	ldr	r0, [r7, #0]
 800307e:	f000 fa6d 	bl	800355c <prvAddCurrentTaskToDelayedList>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200003a0 	.word	0x200003a0

08003090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60fb      	str	r3, [r7, #12]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3318      	adds	r3, #24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f83f 	bl	8002146 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <xTaskRemoveFromEventList+0xb0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11c      	bne.n	800310a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f836 	bl	8002146 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030de:	2201      	movs	r2, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <xTaskRemoveFromEventList+0xb4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <xTaskRemoveFromEventList+0xb4>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <xTaskRemoveFromEventList+0xb8>)
 80030fa:	441a      	add	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7fe ffc4 	bl	8002090 <vListInsertEnd>
 8003108:	e005      	b.n	8003116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3318      	adds	r3, #24
 800310e:	4619      	mov	r1, r3
 8003110:	480e      	ldr	r0, [pc, #56]	@ (800314c <xTaskRemoveFromEventList+0xbc>)
 8003112:	f7fe ffbd 	bl	8002090 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311a:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <xTaskRemoveFromEventList+0xc0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	429a      	cmp	r2, r3
 8003122:	d905      	bls.n	8003130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003124:	2301      	movs	r3, #1
 8003126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <xTaskRemoveFromEventList+0xc4>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e001      	b.n	8003134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003134:	697b      	ldr	r3, [r7, #20]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200004c8 	.word	0x200004c8
 8003144:	200004a8 	.word	0x200004a8
 8003148:	200003a4 	.word	0x200003a4
 800314c:	20000460 	.word	0x20000460
 8003150:	200003a0 	.word	0x200003a0
 8003154:	200004b4 	.word	0x200004b4

08003158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <vTaskInternalSetTimeOutState+0x24>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <vTaskInternalSetTimeOutState+0x28>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	200004b8 	.word	0x200004b8
 8003180:	200004a4 	.word	0x200004a4

08003184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	613b      	str	r3, [r7, #16]
}
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80031ca:	f000 fb1f 	bl	800380c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <xTaskCheckForTimeOut+0xc0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d102      	bne.n	80031ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e023      	b.n	8003236 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <xTaskCheckForTimeOut+0xc4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d007      	beq.n	800320a <xTaskCheckForTimeOut+0x86>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003204:	2301      	movs	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e015      	b.n	8003236 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	d20b      	bcs.n	800322c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff99 	bl	8003158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e004      	b.n	8003236 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003236:	f000 fb19 	bl	800386c <vPortExitCritical>

	return xReturn;
 800323a:	69fb      	ldr	r3, [r7, #28]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200004a4 	.word	0x200004a4
 8003248:	200004b8 	.word	0x200004b8

0800324c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <vTaskMissedYield+0x14>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	200004b4 	.word	0x200004b4

08003264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800326c:	f000 f852 	bl	8003314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <prvIdleTask+0x28>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d9f9      	bls.n	800326c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <prvIdleTask+0x2c>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003288:	e7f0      	b.n	800326c <prvIdleTask+0x8>
 800328a:	bf00      	nop
 800328c:	200003a4 	.word	0x200003a4
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	e00c      	b.n	80032ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4a12      	ldr	r2, [pc, #72]	@ (80032f4 <prvInitialiseTaskLists+0x60>)
 80032ac:	4413      	add	r3, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fec3 	bl	800203a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3301      	adds	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d9ef      	bls.n	80032a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032c0:	480d      	ldr	r0, [pc, #52]	@ (80032f8 <prvInitialiseTaskLists+0x64>)
 80032c2:	f7fe feba 	bl	800203a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032c6:	480d      	ldr	r0, [pc, #52]	@ (80032fc <prvInitialiseTaskLists+0x68>)
 80032c8:	f7fe feb7 	bl	800203a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032cc:	480c      	ldr	r0, [pc, #48]	@ (8003300 <prvInitialiseTaskLists+0x6c>)
 80032ce:	f7fe feb4 	bl	800203a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032d2:	480c      	ldr	r0, [pc, #48]	@ (8003304 <prvInitialiseTaskLists+0x70>)
 80032d4:	f7fe feb1 	bl	800203a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032d8:	480b      	ldr	r0, [pc, #44]	@ (8003308 <prvInitialiseTaskLists+0x74>)
 80032da:	f7fe feae 	bl	800203a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <prvInitialiseTaskLists+0x78>)
 80032e0:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <prvInitialiseTaskLists+0x64>)
 80032e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <prvInitialiseTaskLists+0x7c>)
 80032e6:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <prvInitialiseTaskLists+0x68>)
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200003a4 	.word	0x200003a4
 80032f8:	20000430 	.word	0x20000430
 80032fc:	20000444 	.word	0x20000444
 8003300:	20000460 	.word	0x20000460
 8003304:	20000474 	.word	0x20000474
 8003308:	2000048c 	.word	0x2000048c
 800330c:	20000458 	.word	0x20000458
 8003310:	2000045c 	.word	0x2000045c

08003314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800331a:	e019      	b.n	8003350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800331c:	f000 fa76 	bl	800380c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <prvCheckTasksWaitingTermination+0x50>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe ff0a 	bl	8002146 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <prvCheckTasksWaitingTermination+0x54>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3b01      	subs	r3, #1
 8003338:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <prvCheckTasksWaitingTermination+0x54>)
 800333a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <prvCheckTasksWaitingTermination+0x58>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <prvCheckTasksWaitingTermination+0x58>)
 8003344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003346:	f000 fa91 	bl	800386c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f810 	bl	8003370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <prvCheckTasksWaitingTermination+0x58>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e1      	bne.n	800331c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000474 	.word	0x20000474
 8003368:	200004a0 	.word	0x200004a0
 800336c:	20000488 	.word	0x20000488

08003370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fbd0 	bl	8003b2c <vPortFree>
				vPortFree( pxTCB );
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fbcd 	bl	8003b2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003392:	e019      	b.n	80033c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800339a:	2b01      	cmp	r3, #1
 800339c:	d103      	bne.n	80033a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fbc4 	bl	8003b2c <vPortFree>
	}
 80033a4:	e010      	b.n	80033c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d00b      	beq.n	80033c8 <prvDeleteTCB+0x58>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60fb      	str	r3, [r7, #12]
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <prvDeleteTCB+0x54>
	}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <prvResetNextTaskUnblockTime+0x38>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <prvResetNextTaskUnblockTime+0x3c>)
 80033e2:	f04f 32ff 	mov.w	r2, #4294967295
 80033e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033e8:	e008      	b.n	80033fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ea:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <prvResetNextTaskUnblockTime+0x38>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a04      	ldr	r2, [pc, #16]	@ (800340c <prvResetNextTaskUnblockTime+0x3c>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000458 	.word	0x20000458
 800340c:	200004c0 	.word	0x200004c0

08003410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <xTaskGetSchedulerState+0x34>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800341e:	2301      	movs	r3, #1
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	e008      	b.n	8003436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <xTaskGetSchedulerState+0x38>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800342c:	2302      	movs	r3, #2
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e001      	b.n	8003436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003436:	687b      	ldr	r3, [r7, #4]
	}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200004ac 	.word	0x200004ac
 8003448:	200004c8 	.word	0x200004c8

0800344c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d070      	beq.n	8003544 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003462:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <xTaskPriorityDisinherit+0x104>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	429a      	cmp	r2, r3
 800346a:	d00b      	beq.n	8003484 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60fb      	str	r3, [r7, #12]
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60bb      	str	r3, [r7, #8]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	1e5a      	subs	r2, r3, #1
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d044      	beq.n	8003544 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d140      	bne.n	8003544 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fe3d 	bl	8002146 <uxListRemove>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d115      	bne.n	80034fe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d6:	491f      	ldr	r1, [pc, #124]	@ (8003554 <xTaskPriorityDisinherit+0x108>)
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xTaskPriorityDisinherit+0xb2>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <xTaskPriorityDisinherit+0x10c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4013      	ands	r3, r2
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <xTaskPriorityDisinherit+0x10c>)
 80034fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	f1c3 0207 	rsb	r2, r3, #7
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <xTaskPriorityDisinherit+0x10c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <xTaskPriorityDisinherit+0x10c>)
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4a08      	ldr	r2, [pc, #32]	@ (8003554 <xTaskPriorityDisinherit+0x108>)
 8003532:	441a      	add	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f7fe fda8 	bl	8002090 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003544:	697b      	ldr	r3, [r7, #20]
	}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200003a0 	.word	0x200003a0
 8003554:	200003a4 	.word	0x200003a4
 8003558:	200004a8 	.word	0x200004a8

0800355c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003566:	4b29      	ldr	r3, [pc, #164]	@ (800360c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fde7 	bl	8002146 <uxListRemove>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	2201      	movs	r2, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4013      	ands	r3, r2
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003594:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d10a      	bne.n	80035b4 <prvAddCurrentTaskToDelayedList+0x58>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	481a      	ldr	r0, [pc, #104]	@ (8003618 <prvAddCurrentTaskToDelayedList+0xbc>)
 80035ae:	f7fe fd6f 	bl	8002090 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035b2:	e026      	b.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035bc:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d209      	bcs.n	80035e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <prvAddCurrentTaskToDelayedList+0xc0>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7fe fd7c 	bl	80020d6 <vListInsert>
}
 80035de:	e010      	b.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7fe fd72 	bl	80020d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d202      	bcs.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035fc:	4a09      	ldr	r2, [pc, #36]	@ (8003624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6013      	str	r3, [r2, #0]
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200004a4 	.word	0x200004a4
 8003610:	200003a0 	.word	0x200003a0
 8003614:	200004a8 	.word	0x200004a8
 8003618:	2000048c 	.word	0x2000048c
 800361c:	2000045c 	.word	0x2000045c
 8003620:	20000458 	.word	0x20000458
 8003624:	200004c0 	.word	0x200004c0

08003628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3b04      	subs	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b04      	subs	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3b04      	subs	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003658:	4a08      	ldr	r2, [pc, #32]	@ (800367c <pxPortInitialiseStack+0x54>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b14      	subs	r3, #20
 8003662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b20      	subs	r3, #32
 800366e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	08003681 	.word	0x08003681

08003680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <prvTaskExitError+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d00b      	beq.n	80036ac <prvTaskExitError+0x2c>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <prvTaskExitError+0x28>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60bb      	str	r3, [r7, #8]
}
 80036be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036c0:	bf00      	nop
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0fc      	beq.n	80036c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	2000000c 	.word	0x2000000c
	...

080036e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80036fe:	4770      	bx	lr

08003700 <pxCurrentTCBConst2>:
 8003700:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003708:	4806      	ldr	r0, [pc, #24]	@ (8003724 <prvPortStartFirstTask+0x1c>)
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f380 8808 	msr	MSP, r0
 8003712:	b662      	cpsie	i
 8003714:	b661      	cpsie	f
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	df00      	svc	0
 8003720:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003722:	bf00      	nop
 8003724:	e000ed08 	.word	0xe000ed08

08003728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800372e:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <xPortStartScheduler+0xd0>)
 8003730:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	22ff      	movs	r2, #255	@ 0xff
 800373e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <xPortStartScheduler+0xd4>)
 8003754:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <xPortStartScheduler+0xd8>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800375c:	e009      	b.n	8003772 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800375e:	4b28      	ldr	r3, [pc, #160]	@ (8003800 <xPortStartScheduler+0xd8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3b01      	subs	r3, #1
 8003764:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <xPortStartScheduler+0xd8>)
 8003766:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d0ef      	beq.n	800375e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <xPortStartScheduler+0xd8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00b      	beq.n	80037a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60bb      	str	r3, [r7, #8]
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	e7fd      	b.n	800379e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037a2:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <xPortStartScheduler+0xd8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	4a15      	ldr	r2, [pc, #84]	@ (8003800 <xPortStartScheduler+0xd8>)
 80037aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <xPortStartScheduler+0xd8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037b4:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <xPortStartScheduler+0xd8>)
 80037b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037c0:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <xPortStartScheduler+0xdc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003804 <xPortStartScheduler+0xdc>)
 80037c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <xPortStartScheduler+0xdc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003804 <xPortStartScheduler+0xdc>)
 80037d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80037d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037d8:	f000 f8b8 	bl	800394c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <xPortStartScheduler+0xe0>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037e2:	f7ff ff91 	bl	8003708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037e6:	f7ff fbd1 	bl	8002f8c <vTaskSwitchContext>
	prvTaskExitError();
 80037ea:	f7ff ff49 	bl	8003680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	e000e400 	.word	0xe000e400
 80037fc:	200004cc 	.word	0x200004cc
 8003800:	200004d0 	.word	0x200004d0
 8003804:	e000ed20 	.word	0xe000ed20
 8003808:	2000000c 	.word	0x2000000c

0800380c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	607b      	str	r3, [r7, #4]
}
 8003824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003826:	4b0f      	ldr	r3, [pc, #60]	@ (8003864 <vPortEnterCritical+0x58>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	4a0d      	ldr	r2, [pc, #52]	@ (8003864 <vPortEnterCritical+0x58>)
 800382e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <vPortEnterCritical+0x58>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d110      	bne.n	800385a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <vPortEnterCritical+0x5c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <vPortEnterCritical+0x4e>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	603b      	str	r3, [r7, #0]
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	e7fd      	b.n	8003856 <vPortEnterCritical+0x4a>
	}
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	2000000c 	.word	0x2000000c
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003872:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <vPortExitCritical+0x50>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <vPortExitCritical+0x26>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <vPortExitCritical+0x50>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <vPortExitCritical+0x50>)
 800389a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800389c:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <vPortExitCritical+0x50>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <vPortExitCritical+0x44>
 80038a4:	2300      	movs	r3, #0
 80038a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038c0:	f3ef 8009 	mrs	r0, PSP
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <pxCurrentTCBConst>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038d0:	6010      	str	r0, [r2, #0]
 80038d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80038d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80038da:	f380 8811 	msr	BASEPRI, r0
 80038de:	f7ff fb55 	bl	8002f8c <vTaskSwitchContext>
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8811 	msr	BASEPRI, r0
 80038ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038f6:	f380 8809 	msr	PSP, r0
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	4770      	bx	lr

08003900 <pxCurrentTCBConst>:
 8003900:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop

08003908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	607b      	str	r3, [r7, #4]
}
 8003920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003922:	f7ff fa79 	bl	8002e18 <xTaskIncrementTick>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <SysTick_Handler+0x40>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f383 8811 	msr	BASEPRI, r3
}
 800393e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <vPortSetupTimerInterrupt+0x30>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800395c:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <vPortSetupTimerInterrupt+0x38>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <vPortSetupTimerInterrupt+0x3c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	4a08      	ldr	r2, [pc, #32]	@ (800398c <vPortSetupTimerInterrupt+0x40>)
 800396a:	3b01      	subs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800396e:	4b03      	ldr	r3, [pc, #12]	@ (800397c <vPortSetupTimerInterrupt+0x30>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	e000e010 	.word	0xe000e010
 8003980:	e000e018 	.word	0xe000e018
 8003984:	20000000 	.word	0x20000000
 8003988:	10624dd3 	.word	0x10624dd3
 800398c:	e000e014 	.word	0xe000e014

08003990 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800399c:	f7ff f990 	bl	8002cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <pvPortMalloc+0x184>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80039a8:	f000 f924 	bl	8003bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003b18 <pvPortMalloc+0x188>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 8095 	bne.w	8003ae4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01e      	beq.n	80039fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80039c0:	2208      	movs	r2, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d015      	beq.n	80039fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	3308      	adds	r3, #8
 80039da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <pvPortMalloc+0x6e>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	617b      	str	r3, [r7, #20]
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	e7fd      	b.n	80039fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d06f      	beq.n	8003ae4 <pvPortMalloc+0x154>
 8003a04:	4b45      	ldr	r3, [pc, #276]	@ (8003b1c <pvPortMalloc+0x18c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d86a      	bhi.n	8003ae4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a0e:	4b44      	ldr	r3, [pc, #272]	@ (8003b20 <pvPortMalloc+0x190>)
 8003a10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a12:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <pvPortMalloc+0x190>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a18:	e004      	b.n	8003a24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d903      	bls.n	8003a36 <pvPortMalloc+0xa6>
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f1      	bne.n	8003a1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a36:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <pvPortMalloc+0x184>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d051      	beq.n	8003ae4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	4413      	add	r3, r2
 8003a48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	1ad2      	subs	r2, r2, r3
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d920      	bls.n	8003aa4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <pvPortMalloc+0xfc>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	613b      	str	r3, [r7, #16]
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f000 f90a 	bl	8003cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <pvPortMalloc+0x18c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <pvPortMalloc+0x18c>)
 8003ab0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <pvPortMalloc+0x18c>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <pvPortMalloc+0x194>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d203      	bcs.n	8003ac6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003abe:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <pvPortMalloc+0x18c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <pvPortMalloc+0x194>)
 8003ac4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <pvPortMalloc+0x188>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003ada:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <pvPortMalloc+0x198>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <pvPortMalloc+0x198>)
 8003ae2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ae4:	f7ff f8fa 	bl	8002cdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <pvPortMalloc+0x17a>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60fb      	str	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <pvPortMalloc+0x176>
	return pvReturn;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	@ 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200010dc 	.word	0x200010dc
 8003b18:	200010f0 	.word	0x200010f0
 8003b1c:	200010e0 	.word	0x200010e0
 8003b20:	200010d4 	.word	0x200010d4
 8003b24:	200010e4 	.word	0x200010e4
 8003b28:	200010e8 	.word	0x200010e8

08003b2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04f      	beq.n	8003bde <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b3e:	2308      	movs	r3, #8
 8003b40:	425b      	negs	r3, r3
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <vPortFree+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <vPortFree+0x46>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	60fb      	str	r3, [r7, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	e7fd      	b.n	8003b6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <vPortFree+0x66>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	60bb      	str	r3, [r7, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <vPortFree+0xbc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01e      	beq.n	8003bde <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11a      	bne.n	8003bde <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <vPortFree+0xbc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bb8:	f7ff f882 	bl	8002cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <vPortFree+0xc0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a09      	ldr	r2, [pc, #36]	@ (8003bec <vPortFree+0xc0>)
 8003bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bca:	6938      	ldr	r0, [r7, #16]
 8003bcc:	f000 f874 	bl	8003cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <vPortFree+0xc4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	4a06      	ldr	r2, [pc, #24]	@ (8003bf0 <vPortFree+0xc4>)
 8003bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003bda:	f7ff f87f 	bl	8002cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200010f0 	.word	0x200010f0
 8003bec:	200010e0 	.word	0x200010e0
 8003bf0:	200010ec 	.word	0x200010ec

08003bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bfa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c00:	4b27      	ldr	r3, [pc, #156]	@ (8003ca0 <prvHeapInit+0xac>)
 8003c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3307      	adds	r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <prvHeapInit+0xac>)
 8003c24:	4413      	add	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <prvHeapInit+0xb0>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca4 <prvHeapInit+0xb0>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c40:	2208      	movs	r2, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <prvHeapInit+0xb4>)
 8003c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <prvHeapInit+0xb4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <prvHeapInit+0xb4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <prvHeapInit+0xb4>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <prvHeapInit+0xb8>)
 8003c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a09      	ldr	r2, [pc, #36]	@ (8003cb0 <prvHeapInit+0xbc>)
 8003c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <prvHeapInit+0xc0>)
 8003c8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c92:	601a      	str	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	200004d4 	.word	0x200004d4
 8003ca4:	200010d4 	.word	0x200010d4
 8003ca8:	200010dc 	.word	0x200010dc
 8003cac:	200010e4 	.word	0x200010e4
 8003cb0:	200010e0 	.word	0x200010e0
 8003cb4:	200010f0 	.word	0x200010f0

08003cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003cc0:	4b27      	ldr	r3, [pc, #156]	@ (8003d60 <prvInsertBlockIntoFreeList+0xa8>)
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e002      	b.n	8003ccc <prvInsertBlockIntoFreeList+0x14>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d8f7      	bhi.n	8003cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d108      	bne.n	8003cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d118      	bne.n	8003d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <prvInsertBlockIntoFreeList+0xac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d00d      	beq.n	8003d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	441a      	add	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e008      	b.n	8003d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <prvInsertBlockIntoFreeList+0xac>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e003      	b.n	8003d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d002      	beq.n	8003d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	200010d4 	.word	0x200010d4
 8003d64:	200010dc 	.word	0x200010dc

08003d68 <_vsniprintf_r>:
 8003d68:	b530      	push	{r4, r5, lr}
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	2c00      	cmp	r4, #0
 8003d6e:	4605      	mov	r5, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	b09b      	sub	sp, #108	@ 0x6c
 8003d74:	da05      	bge.n	8003d82 <_vsniprintf_r+0x1a>
 8003d76:	238b      	movs	r3, #139	@ 0x8b
 8003d78:	6003      	str	r3, [r0, #0]
 8003d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7e:	b01b      	add	sp, #108	@ 0x6c
 8003d80:	bd30      	pop	{r4, r5, pc}
 8003d82:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003d86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	9319      	str	r3, [sp, #100]	@ 0x64
 8003d90:	bf0c      	ite	eq
 8003d92:	4623      	moveq	r3, r4
 8003d94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003da0:	9100      	str	r1, [sp, #0]
 8003da2:	9104      	str	r1, [sp, #16]
 8003da4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003da8:	4669      	mov	r1, sp
 8003daa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003dac:	f000 f9ac 	bl	8004108 <_svfiprintf_r>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	bfbc      	itt	lt
 8003db4:	238b      	movlt	r3, #139	@ 0x8b
 8003db6:	602b      	strlt	r3, [r5, #0]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d0e0      	beq.n	8003d7e <_vsniprintf_r+0x16>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	9b00      	ldr	r3, [sp, #0]
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e7dc      	b.n	8003d7e <_vsniprintf_r+0x16>

08003dc4 <vsniprintf>:
 8003dc4:	b507      	push	{r0, r1, r2, lr}
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	460a      	mov	r2, r1
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <vsniprintf+0x18>)
 8003dd0:	6800      	ldr	r0, [r0, #0]
 8003dd2:	f7ff ffc9 	bl	8003d68 <_vsniprintf_r>
 8003dd6:	b003      	add	sp, #12
 8003dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ddc:	20000010 	.word	0x20000010

08003de0 <memset>:
 8003de0:	4603      	mov	r3, r0
 8003de2:	4402      	add	r2, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <__errno>:
 8003df0:	4b01      	ldr	r3, [pc, #4]	@ (8003df8 <__errno+0x8>)
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000010 	.word	0x20000010

08003dfc <__libc_init_array>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	2600      	movs	r6, #0
 8003e00:	4d0c      	ldr	r5, [pc, #48]	@ (8003e34 <__libc_init_array+0x38>)
 8003e02:	4c0d      	ldr	r4, [pc, #52]	@ (8003e38 <__libc_init_array+0x3c>)
 8003e04:	1b64      	subs	r4, r4, r5
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	42a6      	cmp	r6, r4
 8003e0a:	d109      	bne.n	8003e20 <__libc_init_array+0x24>
 8003e0c:	f000 fc76 	bl	80046fc <_init>
 8003e10:	2600      	movs	r6, #0
 8003e12:	4d0a      	ldr	r5, [pc, #40]	@ (8003e3c <__libc_init_array+0x40>)
 8003e14:	4c0a      	ldr	r4, [pc, #40]	@ (8003e40 <__libc_init_array+0x44>)
 8003e16:	1b64      	subs	r4, r4, r5
 8003e18:	10a4      	asrs	r4, r4, #2
 8003e1a:	42a6      	cmp	r6, r4
 8003e1c:	d105      	bne.n	8003e2a <__libc_init_array+0x2e>
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
 8003e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e24:	4798      	blx	r3
 8003e26:	3601      	adds	r6, #1
 8003e28:	e7ee      	b.n	8003e08 <__libc_init_array+0xc>
 8003e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2e:	4798      	blx	r3
 8003e30:	3601      	adds	r6, #1
 8003e32:	e7f2      	b.n	8003e1a <__libc_init_array+0x1e>
 8003e34:	080047ec 	.word	0x080047ec
 8003e38:	080047ec 	.word	0x080047ec
 8003e3c:	080047ec 	.word	0x080047ec
 8003e40:	080047f0 	.word	0x080047f0

08003e44 <__retarget_lock_acquire_recursive>:
 8003e44:	4770      	bx	lr

08003e46 <__retarget_lock_release_recursive>:
 8003e46:	4770      	bx	lr

08003e48 <memcpy>:
 8003e48:	440a      	add	r2, r1
 8003e4a:	4291      	cmp	r1, r2
 8003e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e50:	d100      	bne.n	8003e54 <memcpy+0xc>
 8003e52:	4770      	bx	lr
 8003e54:	b510      	push	{r4, lr}
 8003e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e5a:	4291      	cmp	r1, r2
 8003e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e60:	d1f9      	bne.n	8003e56 <memcpy+0xe>
 8003e62:	bd10      	pop	{r4, pc}

08003e64 <_free_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4605      	mov	r5, r0
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	d040      	beq.n	8003eee <_free_r+0x8a>
 8003e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e70:	1f0c      	subs	r4, r1, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bfb8      	it	lt
 8003e76:	18e4      	addlt	r4, r4, r3
 8003e78:	f000 f8de 	bl	8004038 <__malloc_lock>
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <_free_r+0x8c>)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	b933      	cbnz	r3, 8003e90 <_free_r+0x2c>
 8003e82:	6063      	str	r3, [r4, #4]
 8003e84:	6014      	str	r4, [r2, #0]
 8003e86:	4628      	mov	r0, r5
 8003e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e8c:	f000 b8da 	b.w	8004044 <__malloc_unlock>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x42>
 8003e94:	6820      	ldr	r0, [r4, #0]
 8003e96:	1821      	adds	r1, r4, r0
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf01      	itttt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	1809      	addeq	r1, r1, r0
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	e7ed      	b.n	8003e82 <_free_r+0x1e>
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b10b      	cbz	r3, 8003eb0 <_free_r+0x4c>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d9fa      	bls.n	8003ea6 <_free_r+0x42>
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	1850      	adds	r0, r2, r1
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d10b      	bne.n	8003ed0 <_free_r+0x6c>
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	4401      	add	r1, r0
 8003ebc:	1850      	adds	r0, r2, r1
 8003ebe:	4283      	cmp	r3, r0
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	d1e0      	bne.n	8003e86 <_free_r+0x22>
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4408      	add	r0, r1
 8003eca:	6010      	str	r0, [r2, #0]
 8003ecc:	6053      	str	r3, [r2, #4]
 8003ece:	e7da      	b.n	8003e86 <_free_r+0x22>
 8003ed0:	d902      	bls.n	8003ed8 <_free_r+0x74>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	e7d6      	b.n	8003e86 <_free_r+0x22>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	1821      	adds	r1, r4, r0
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf01      	itttt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	1809      	addeq	r1, r1, r0
 8003ee6:	6021      	streq	r1, [r4, #0]
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	6054      	str	r4, [r2, #4]
 8003eec:	e7cb      	b.n	8003e86 <_free_r+0x22>
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20001238 	.word	0x20001238

08003ef4 <sbrk_aligned>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8003f34 <sbrk_aligned+0x40>)
 8003ef8:	460c      	mov	r4, r1
 8003efa:	6831      	ldr	r1, [r6, #0]
 8003efc:	4605      	mov	r5, r0
 8003efe:	b911      	cbnz	r1, 8003f06 <sbrk_aligned+0x12>
 8003f00:	f000 fba8 	bl	8004654 <_sbrk_r>
 8003f04:	6030      	str	r0, [r6, #0]
 8003f06:	4621      	mov	r1, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 fba3 	bl	8004654 <_sbrk_r>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d103      	bne.n	8003f1a <sbrk_aligned+0x26>
 8003f12:	f04f 34ff 	mov.w	r4, #4294967295
 8003f16:	4620      	mov	r0, r4
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
 8003f1a:	1cc4      	adds	r4, r0, #3
 8003f1c:	f024 0403 	bic.w	r4, r4, #3
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d0f8      	beq.n	8003f16 <sbrk_aligned+0x22>
 8003f24:	1a21      	subs	r1, r4, r0
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 fb94 	bl	8004654 <_sbrk_r>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d1f2      	bne.n	8003f16 <sbrk_aligned+0x22>
 8003f30:	e7ef      	b.n	8003f12 <sbrk_aligned+0x1e>
 8003f32:	bf00      	nop
 8003f34:	20001234 	.word	0x20001234

08003f38 <_malloc_r>:
 8003f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	1ccd      	adds	r5, r1, #3
 8003f3e:	f025 0503 	bic.w	r5, r5, #3
 8003f42:	3508      	adds	r5, #8
 8003f44:	2d0c      	cmp	r5, #12
 8003f46:	bf38      	it	cc
 8003f48:	250c      	movcc	r5, #12
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	db01      	blt.n	8003f54 <_malloc_r+0x1c>
 8003f50:	42a9      	cmp	r1, r5
 8003f52:	d904      	bls.n	8003f5e <_malloc_r+0x26>
 8003f54:	230c      	movs	r3, #12
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004034 <_malloc_r+0xfc>
 8003f62:	f000 f869 	bl	8004038 <__malloc_lock>
 8003f66:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6a:	461c      	mov	r4, r3
 8003f6c:	bb44      	cbnz	r4, 8003fc0 <_malloc_r+0x88>
 8003f6e:	4629      	mov	r1, r5
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ffbf 	bl	8003ef4 <sbrk_aligned>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	4604      	mov	r4, r0
 8003f7a:	d158      	bne.n	800402e <_malloc_r+0xf6>
 8003f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003f80:	4627      	mov	r7, r4
 8003f82:	2f00      	cmp	r7, #0
 8003f84:	d143      	bne.n	800400e <_malloc_r+0xd6>
 8003f86:	2c00      	cmp	r4, #0
 8003f88:	d04b      	beq.n	8004022 <_malloc_r+0xea>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	4639      	mov	r1, r7
 8003f8e:	4630      	mov	r0, r6
 8003f90:	eb04 0903 	add.w	r9, r4, r3
 8003f94:	f000 fb5e 	bl	8004654 <_sbrk_r>
 8003f98:	4581      	cmp	r9, r0
 8003f9a:	d142      	bne.n	8004022 <_malloc_r+0xea>
 8003f9c:	6821      	ldr	r1, [r4, #0]
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	1a6d      	subs	r5, r5, r1
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7ff ffa6 	bl	8003ef4 <sbrk_aligned>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d03a      	beq.n	8004022 <_malloc_r+0xea>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	442b      	add	r3, r5
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	bb62      	cbnz	r2, 8004014 <_malloc_r+0xdc>
 8003fba:	f8c8 7000 	str.w	r7, [r8]
 8003fbe:	e00f      	b.n	8003fe0 <_malloc_r+0xa8>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	1b52      	subs	r2, r2, r5
 8003fc4:	d420      	bmi.n	8004008 <_malloc_r+0xd0>
 8003fc6:	2a0b      	cmp	r2, #11
 8003fc8:	d917      	bls.n	8003ffa <_malloc_r+0xc2>
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	6059      	strne	r1, [r3, #4]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	bf08      	it	eq
 8003fd8:	f8c8 1000 	streq.w	r1, [r8]
 8003fdc:	5162      	str	r2, [r4, r5]
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 f82f 	bl	8004044 <__malloc_unlock>
 8003fe6:	f104 000b 	add.w	r0, r4, #11
 8003fea:	1d23      	adds	r3, r4, #4
 8003fec:	f020 0007 	bic.w	r0, r0, #7
 8003ff0:	1ac2      	subs	r2, r0, r3
 8003ff2:	bf1c      	itt	ne
 8003ff4:	1a1b      	subne	r3, r3, r0
 8003ff6:	50a3      	strne	r3, [r4, r2]
 8003ff8:	e7af      	b.n	8003f5a <_malloc_r+0x22>
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	bf0c      	ite	eq
 8004000:	f8c8 2000 	streq.w	r2, [r8]
 8004004:	605a      	strne	r2, [r3, #4]
 8004006:	e7eb      	b.n	8003fe0 <_malloc_r+0xa8>
 8004008:	4623      	mov	r3, r4
 800400a:	6864      	ldr	r4, [r4, #4]
 800400c:	e7ae      	b.n	8003f6c <_malloc_r+0x34>
 800400e:	463c      	mov	r4, r7
 8004010:	687f      	ldr	r7, [r7, #4]
 8004012:	e7b6      	b.n	8003f82 <_malloc_r+0x4a>
 8004014:	461a      	mov	r2, r3
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	42a3      	cmp	r3, r4
 800401a:	d1fb      	bne.n	8004014 <_malloc_r+0xdc>
 800401c:	2300      	movs	r3, #0
 800401e:	6053      	str	r3, [r2, #4]
 8004020:	e7de      	b.n	8003fe0 <_malloc_r+0xa8>
 8004022:	230c      	movs	r3, #12
 8004024:	4630      	mov	r0, r6
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	f000 f80c 	bl	8004044 <__malloc_unlock>
 800402c:	e794      	b.n	8003f58 <_malloc_r+0x20>
 800402e:	6005      	str	r5, [r0, #0]
 8004030:	e7d6      	b.n	8003fe0 <_malloc_r+0xa8>
 8004032:	bf00      	nop
 8004034:	20001238 	.word	0x20001238

08004038 <__malloc_lock>:
 8004038:	4801      	ldr	r0, [pc, #4]	@ (8004040 <__malloc_lock+0x8>)
 800403a:	f7ff bf03 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	20001230 	.word	0x20001230

08004044 <__malloc_unlock>:
 8004044:	4801      	ldr	r0, [pc, #4]	@ (800404c <__malloc_unlock+0x8>)
 8004046:	f7ff befe 	b.w	8003e46 <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	20001230 	.word	0x20001230

08004050 <__ssputs_r>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	461f      	mov	r7, r3
 8004056:	688e      	ldr	r6, [r1, #8]
 8004058:	4682      	mov	sl, r0
 800405a:	42be      	cmp	r6, r7
 800405c:	460c      	mov	r4, r1
 800405e:	4690      	mov	r8, r2
 8004060:	680b      	ldr	r3, [r1, #0]
 8004062:	d82d      	bhi.n	80040c0 <__ssputs_r+0x70>
 8004064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004068:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800406c:	d026      	beq.n	80040bc <__ssputs_r+0x6c>
 800406e:	6965      	ldr	r5, [r4, #20]
 8004070:	6909      	ldr	r1, [r1, #16]
 8004072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004076:	eba3 0901 	sub.w	r9, r3, r1
 800407a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800407e:	1c7b      	adds	r3, r7, #1
 8004080:	444b      	add	r3, r9
 8004082:	106d      	asrs	r5, r5, #1
 8004084:	429d      	cmp	r5, r3
 8004086:	bf38      	it	cc
 8004088:	461d      	movcc	r5, r3
 800408a:	0553      	lsls	r3, r2, #21
 800408c:	d527      	bpl.n	80040de <__ssputs_r+0x8e>
 800408e:	4629      	mov	r1, r5
 8004090:	f7ff ff52 	bl	8003f38 <_malloc_r>
 8004094:	4606      	mov	r6, r0
 8004096:	b360      	cbz	r0, 80040f2 <__ssputs_r+0xa2>
 8004098:	464a      	mov	r2, r9
 800409a:	6921      	ldr	r1, [r4, #16]
 800409c:	f7ff fed4 	bl	8003e48 <memcpy>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	6126      	str	r6, [r4, #16]
 80040ae:	444e      	add	r6, r9
 80040b0:	6026      	str	r6, [r4, #0]
 80040b2:	463e      	mov	r6, r7
 80040b4:	6165      	str	r5, [r4, #20]
 80040b6:	eba5 0509 	sub.w	r5, r5, r9
 80040ba:	60a5      	str	r5, [r4, #8]
 80040bc:	42be      	cmp	r6, r7
 80040be:	d900      	bls.n	80040c2 <__ssputs_r+0x72>
 80040c0:	463e      	mov	r6, r7
 80040c2:	4632      	mov	r2, r6
 80040c4:	4641      	mov	r1, r8
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	f000 faaa 	bl	8004620 <memmove>
 80040cc:	2000      	movs	r0, #0
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	1b9b      	subs	r3, r3, r6
 80040d2:	60a3      	str	r3, [r4, #8]
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	4433      	add	r3, r6
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	462a      	mov	r2, r5
 80040e0:	f000 fad6 	bl	8004690 <_realloc_r>
 80040e4:	4606      	mov	r6, r0
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d1e0      	bne.n	80040ac <__ssputs_r+0x5c>
 80040ea:	4650      	mov	r0, sl
 80040ec:	6921      	ldr	r1, [r4, #16]
 80040ee:	f7ff feb9 	bl	8003e64 <_free_r>
 80040f2:	230c      	movs	r3, #12
 80040f4:	f8ca 3000 	str.w	r3, [sl]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f04f 30ff 	mov.w	r0, #4294967295
 80040fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	e7e9      	b.n	80040da <__ssputs_r+0x8a>
	...

08004108 <_svfiprintf_r>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	4698      	mov	r8, r3
 800410e:	898b      	ldrh	r3, [r1, #12]
 8004110:	4607      	mov	r7, r0
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	460d      	mov	r5, r1
 8004116:	4614      	mov	r4, r2
 8004118:	b09d      	sub	sp, #116	@ 0x74
 800411a:	d510      	bpl.n	800413e <_svfiprintf_r+0x36>
 800411c:	690b      	ldr	r3, [r1, #16]
 800411e:	b973      	cbnz	r3, 800413e <_svfiprintf_r+0x36>
 8004120:	2140      	movs	r1, #64	@ 0x40
 8004122:	f7ff ff09 	bl	8003f38 <_malloc_r>
 8004126:	6028      	str	r0, [r5, #0]
 8004128:	6128      	str	r0, [r5, #16]
 800412a:	b930      	cbnz	r0, 800413a <_svfiprintf_r+0x32>
 800412c:	230c      	movs	r3, #12
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	b01d      	add	sp, #116	@ 0x74
 8004136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413a:	2340      	movs	r3, #64	@ 0x40
 800413c:	616b      	str	r3, [r5, #20]
 800413e:	2300      	movs	r3, #0
 8004140:	9309      	str	r3, [sp, #36]	@ 0x24
 8004142:	2320      	movs	r3, #32
 8004144:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004148:	2330      	movs	r3, #48	@ 0x30
 800414a:	f04f 0901 	mov.w	r9, #1
 800414e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004152:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80042ec <_svfiprintf_r+0x1e4>
 8004156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800415a:	4623      	mov	r3, r4
 800415c:	469a      	mov	sl, r3
 800415e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004162:	b10a      	cbz	r2, 8004168 <_svfiprintf_r+0x60>
 8004164:	2a25      	cmp	r2, #37	@ 0x25
 8004166:	d1f9      	bne.n	800415c <_svfiprintf_r+0x54>
 8004168:	ebba 0b04 	subs.w	fp, sl, r4
 800416c:	d00b      	beq.n	8004186 <_svfiprintf_r+0x7e>
 800416e:	465b      	mov	r3, fp
 8004170:	4622      	mov	r2, r4
 8004172:	4629      	mov	r1, r5
 8004174:	4638      	mov	r0, r7
 8004176:	f7ff ff6b 	bl	8004050 <__ssputs_r>
 800417a:	3001      	adds	r0, #1
 800417c:	f000 80a7 	beq.w	80042ce <_svfiprintf_r+0x1c6>
 8004180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004182:	445a      	add	r2, fp
 8004184:	9209      	str	r2, [sp, #36]	@ 0x24
 8004186:	f89a 3000 	ldrb.w	r3, [sl]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 809f 	beq.w	80042ce <_svfiprintf_r+0x1c6>
 8004190:	2300      	movs	r3, #0
 8004192:	f04f 32ff 	mov.w	r2, #4294967295
 8004196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800419a:	f10a 0a01 	add.w	sl, sl, #1
 800419e:	9304      	str	r3, [sp, #16]
 80041a0:	9307      	str	r3, [sp, #28]
 80041a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80041a8:	4654      	mov	r4, sl
 80041aa:	2205      	movs	r2, #5
 80041ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b0:	484e      	ldr	r0, [pc, #312]	@ (80042ec <_svfiprintf_r+0x1e4>)
 80041b2:	f000 fa5f 	bl	8004674 <memchr>
 80041b6:	9a04      	ldr	r2, [sp, #16]
 80041b8:	b9d8      	cbnz	r0, 80041f2 <_svfiprintf_r+0xea>
 80041ba:	06d0      	lsls	r0, r2, #27
 80041bc:	bf44      	itt	mi
 80041be:	2320      	movmi	r3, #32
 80041c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041c4:	0711      	lsls	r1, r2, #28
 80041c6:	bf44      	itt	mi
 80041c8:	232b      	movmi	r3, #43	@ 0x2b
 80041ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ce:	f89a 3000 	ldrb.w	r3, [sl]
 80041d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d4:	d015      	beq.n	8004202 <_svfiprintf_r+0xfa>
 80041d6:	4654      	mov	r4, sl
 80041d8:	2000      	movs	r0, #0
 80041da:	f04f 0c0a 	mov.w	ip, #10
 80041de:	9a07      	ldr	r2, [sp, #28]
 80041e0:	4621      	mov	r1, r4
 80041e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041e6:	3b30      	subs	r3, #48	@ 0x30
 80041e8:	2b09      	cmp	r3, #9
 80041ea:	d94b      	bls.n	8004284 <_svfiprintf_r+0x17c>
 80041ec:	b1b0      	cbz	r0, 800421c <_svfiprintf_r+0x114>
 80041ee:	9207      	str	r2, [sp, #28]
 80041f0:	e014      	b.n	800421c <_svfiprintf_r+0x114>
 80041f2:	eba0 0308 	sub.w	r3, r0, r8
 80041f6:	fa09 f303 	lsl.w	r3, r9, r3
 80041fa:	4313      	orrs	r3, r2
 80041fc:	46a2      	mov	sl, r4
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	e7d2      	b.n	80041a8 <_svfiprintf_r+0xa0>
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	1d19      	adds	r1, r3, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	9103      	str	r1, [sp, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfbb      	ittet	lt
 800420e:	425b      	neglt	r3, r3
 8004210:	f042 0202 	orrlt.w	r2, r2, #2
 8004214:	9307      	strge	r3, [sp, #28]
 8004216:	9307      	strlt	r3, [sp, #28]
 8004218:	bfb8      	it	lt
 800421a:	9204      	strlt	r2, [sp, #16]
 800421c:	7823      	ldrb	r3, [r4, #0]
 800421e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004220:	d10a      	bne.n	8004238 <_svfiprintf_r+0x130>
 8004222:	7863      	ldrb	r3, [r4, #1]
 8004224:	2b2a      	cmp	r3, #42	@ 0x2a
 8004226:	d132      	bne.n	800428e <_svfiprintf_r+0x186>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	3402      	adds	r4, #2
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	9203      	str	r2, [sp, #12]
 8004232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004236:	9305      	str	r3, [sp, #20]
 8004238:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80042f0 <_svfiprintf_r+0x1e8>
 800423c:	2203      	movs	r2, #3
 800423e:	4650      	mov	r0, sl
 8004240:	7821      	ldrb	r1, [r4, #0]
 8004242:	f000 fa17 	bl	8004674 <memchr>
 8004246:	b138      	cbz	r0, 8004258 <_svfiprintf_r+0x150>
 8004248:	2240      	movs	r2, #64	@ 0x40
 800424a:	9b04      	ldr	r3, [sp, #16]
 800424c:	eba0 000a 	sub.w	r0, r0, sl
 8004250:	4082      	lsls	r2, r0
 8004252:	4313      	orrs	r3, r2
 8004254:	3401      	adds	r4, #1
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800425c:	2206      	movs	r2, #6
 800425e:	4825      	ldr	r0, [pc, #148]	@ (80042f4 <_svfiprintf_r+0x1ec>)
 8004260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004264:	f000 fa06 	bl	8004674 <memchr>
 8004268:	2800      	cmp	r0, #0
 800426a:	d036      	beq.n	80042da <_svfiprintf_r+0x1d2>
 800426c:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <_svfiprintf_r+0x1f0>)
 800426e:	bb1b      	cbnz	r3, 80042b8 <_svfiprintf_r+0x1b0>
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	3307      	adds	r3, #7
 8004274:	f023 0307 	bic.w	r3, r3, #7
 8004278:	3308      	adds	r3, #8
 800427a:	9303      	str	r3, [sp, #12]
 800427c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427e:	4433      	add	r3, r6
 8004280:	9309      	str	r3, [sp, #36]	@ 0x24
 8004282:	e76a      	b.n	800415a <_svfiprintf_r+0x52>
 8004284:	460c      	mov	r4, r1
 8004286:	2001      	movs	r0, #1
 8004288:	fb0c 3202 	mla	r2, ip, r2, r3
 800428c:	e7a8      	b.n	80041e0 <_svfiprintf_r+0xd8>
 800428e:	2300      	movs	r3, #0
 8004290:	f04f 0c0a 	mov.w	ip, #10
 8004294:	4619      	mov	r1, r3
 8004296:	3401      	adds	r4, #1
 8004298:	9305      	str	r3, [sp, #20]
 800429a:	4620      	mov	r0, r4
 800429c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042a0:	3a30      	subs	r2, #48	@ 0x30
 80042a2:	2a09      	cmp	r2, #9
 80042a4:	d903      	bls.n	80042ae <_svfiprintf_r+0x1a6>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0c6      	beq.n	8004238 <_svfiprintf_r+0x130>
 80042aa:	9105      	str	r1, [sp, #20]
 80042ac:	e7c4      	b.n	8004238 <_svfiprintf_r+0x130>
 80042ae:	4604      	mov	r4, r0
 80042b0:	2301      	movs	r3, #1
 80042b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042b6:	e7f0      	b.n	800429a <_svfiprintf_r+0x192>
 80042b8:	ab03      	add	r3, sp, #12
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	462a      	mov	r2, r5
 80042be:	4638      	mov	r0, r7
 80042c0:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <_svfiprintf_r+0x1f4>)
 80042c2:	a904      	add	r1, sp, #16
 80042c4:	f3af 8000 	nop.w
 80042c8:	1c42      	adds	r2, r0, #1
 80042ca:	4606      	mov	r6, r0
 80042cc:	d1d6      	bne.n	800427c <_svfiprintf_r+0x174>
 80042ce:	89ab      	ldrh	r3, [r5, #12]
 80042d0:	065b      	lsls	r3, r3, #25
 80042d2:	f53f af2d 	bmi.w	8004130 <_svfiprintf_r+0x28>
 80042d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042d8:	e72c      	b.n	8004134 <_svfiprintf_r+0x2c>
 80042da:	ab03      	add	r3, sp, #12
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	462a      	mov	r2, r5
 80042e0:	4638      	mov	r0, r7
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <_svfiprintf_r+0x1f4>)
 80042e4:	a904      	add	r1, sp, #16
 80042e6:	f000 f87d 	bl	80043e4 <_printf_i>
 80042ea:	e7ed      	b.n	80042c8 <_svfiprintf_r+0x1c0>
 80042ec:	080047b6 	.word	0x080047b6
 80042f0:	080047bc 	.word	0x080047bc
 80042f4:	080047c0 	.word	0x080047c0
 80042f8:	00000000 	.word	0x00000000
 80042fc:	08004051 	.word	0x08004051

08004300 <_printf_common>:
 8004300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	4616      	mov	r6, r2
 8004306:	4698      	mov	r8, r3
 8004308:	688a      	ldr	r2, [r1, #8]
 800430a:	690b      	ldr	r3, [r1, #16]
 800430c:	4607      	mov	r7, r0
 800430e:	4293      	cmp	r3, r2
 8004310:	bfb8      	it	lt
 8004312:	4613      	movlt	r3, r2
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800431a:	460c      	mov	r4, r1
 800431c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004320:	b10a      	cbz	r2, 8004326 <_printf_common+0x26>
 8004322:	3301      	adds	r3, #1
 8004324:	6033      	str	r3, [r6, #0]
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	0699      	lsls	r1, r3, #26
 800432a:	bf42      	ittt	mi
 800432c:	6833      	ldrmi	r3, [r6, #0]
 800432e:	3302      	addmi	r3, #2
 8004330:	6033      	strmi	r3, [r6, #0]
 8004332:	6825      	ldr	r5, [r4, #0]
 8004334:	f015 0506 	ands.w	r5, r5, #6
 8004338:	d106      	bne.n	8004348 <_printf_common+0x48>
 800433a:	f104 0a19 	add.w	sl, r4, #25
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	6832      	ldr	r2, [r6, #0]
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	42ab      	cmp	r3, r5
 8004346:	dc2b      	bgt.n	80043a0 <_printf_common+0xa0>
 8004348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	3b00      	subs	r3, #0
 8004350:	bf18      	it	ne
 8004352:	2301      	movne	r3, #1
 8004354:	0692      	lsls	r2, r2, #26
 8004356:	d430      	bmi.n	80043ba <_printf_common+0xba>
 8004358:	4641      	mov	r1, r8
 800435a:	4638      	mov	r0, r7
 800435c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004360:	47c8      	blx	r9
 8004362:	3001      	adds	r0, #1
 8004364:	d023      	beq.n	80043ae <_printf_common+0xae>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	6922      	ldr	r2, [r4, #16]
 800436a:	f003 0306 	and.w	r3, r3, #6
 800436e:	2b04      	cmp	r3, #4
 8004370:	bf14      	ite	ne
 8004372:	2500      	movne	r5, #0
 8004374:	6833      	ldreq	r3, [r6, #0]
 8004376:	f04f 0600 	mov.w	r6, #0
 800437a:	bf08      	it	eq
 800437c:	68e5      	ldreq	r5, [r4, #12]
 800437e:	f104 041a 	add.w	r4, r4, #26
 8004382:	bf08      	it	eq
 8004384:	1aed      	subeq	r5, r5, r3
 8004386:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800438a:	bf08      	it	eq
 800438c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004390:	4293      	cmp	r3, r2
 8004392:	bfc4      	itt	gt
 8004394:	1a9b      	subgt	r3, r3, r2
 8004396:	18ed      	addgt	r5, r5, r3
 8004398:	42b5      	cmp	r5, r6
 800439a:	d11a      	bne.n	80043d2 <_printf_common+0xd2>
 800439c:	2000      	movs	r0, #0
 800439e:	e008      	b.n	80043b2 <_printf_common+0xb2>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4652      	mov	r2, sl
 80043a4:	4641      	mov	r1, r8
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c8      	blx	r9
 80043aa:	3001      	adds	r0, #1
 80043ac:	d103      	bne.n	80043b6 <_printf_common+0xb6>
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b6:	3501      	adds	r5, #1
 80043b8:	e7c1      	b.n	800433e <_printf_common+0x3e>
 80043ba:	2030      	movs	r0, #48	@ 0x30
 80043bc:	18e1      	adds	r1, r4, r3
 80043be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043c8:	4422      	add	r2, r4
 80043ca:	3302      	adds	r3, #2
 80043cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043d0:	e7c2      	b.n	8004358 <_printf_common+0x58>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4622      	mov	r2, r4
 80043d6:	4641      	mov	r1, r8
 80043d8:	4638      	mov	r0, r7
 80043da:	47c8      	blx	r9
 80043dc:	3001      	adds	r0, #1
 80043de:	d0e6      	beq.n	80043ae <_printf_common+0xae>
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7d9      	b.n	8004398 <_printf_common+0x98>

080043e4 <_printf_i>:
 80043e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	7e0f      	ldrb	r7, [r1, #24]
 80043ea:	4691      	mov	r9, r2
 80043ec:	2f78      	cmp	r7, #120	@ 0x78
 80043ee:	4680      	mov	r8, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	469a      	mov	sl, r3
 80043f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043fa:	d807      	bhi.n	800440c <_printf_i+0x28>
 80043fc:	2f62      	cmp	r7, #98	@ 0x62
 80043fe:	d80a      	bhi.n	8004416 <_printf_i+0x32>
 8004400:	2f00      	cmp	r7, #0
 8004402:	f000 80d1 	beq.w	80045a8 <_printf_i+0x1c4>
 8004406:	2f58      	cmp	r7, #88	@ 0x58
 8004408:	f000 80b8 	beq.w	800457c <_printf_i+0x198>
 800440c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004414:	e03a      	b.n	800448c <_printf_i+0xa8>
 8004416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800441a:	2b15      	cmp	r3, #21
 800441c:	d8f6      	bhi.n	800440c <_printf_i+0x28>
 800441e:	a101      	add	r1, pc, #4	@ (adr r1, 8004424 <_printf_i+0x40>)
 8004420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004424:	0800447d 	.word	0x0800447d
 8004428:	08004491 	.word	0x08004491
 800442c:	0800440d 	.word	0x0800440d
 8004430:	0800440d 	.word	0x0800440d
 8004434:	0800440d 	.word	0x0800440d
 8004438:	0800440d 	.word	0x0800440d
 800443c:	08004491 	.word	0x08004491
 8004440:	0800440d 	.word	0x0800440d
 8004444:	0800440d 	.word	0x0800440d
 8004448:	0800440d 	.word	0x0800440d
 800444c:	0800440d 	.word	0x0800440d
 8004450:	0800458f 	.word	0x0800458f
 8004454:	080044bb 	.word	0x080044bb
 8004458:	08004549 	.word	0x08004549
 800445c:	0800440d 	.word	0x0800440d
 8004460:	0800440d 	.word	0x0800440d
 8004464:	080045b1 	.word	0x080045b1
 8004468:	0800440d 	.word	0x0800440d
 800446c:	080044bb 	.word	0x080044bb
 8004470:	0800440d 	.word	0x0800440d
 8004474:	0800440d 	.word	0x0800440d
 8004478:	08004551 	.word	0x08004551
 800447c:	6833      	ldr	r3, [r6, #0]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6032      	str	r2, [r6, #0]
 8004484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800448c:	2301      	movs	r3, #1
 800448e:	e09c      	b.n	80045ca <_printf_i+0x1e6>
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	6031      	str	r1, [r6, #0]
 8004498:	0606      	lsls	r6, r0, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xbc>
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	e003      	b.n	80044a8 <_printf_i+0xc4>
 80044a0:	0645      	lsls	r5, r0, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xb8>
 80044a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	da03      	bge.n	80044b4 <_printf_i+0xd0>
 80044ac:	232d      	movs	r3, #45	@ 0x2d
 80044ae:	426d      	negs	r5, r5
 80044b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b4:	230a      	movs	r3, #10
 80044b6:	4858      	ldr	r0, [pc, #352]	@ (8004618 <_printf_i+0x234>)
 80044b8:	e011      	b.n	80044de <_printf_i+0xfa>
 80044ba:	6821      	ldr	r1, [r4, #0]
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	0608      	lsls	r0, r1, #24
 80044c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044c4:	d402      	bmi.n	80044cc <_printf_i+0xe8>
 80044c6:	0649      	lsls	r1, r1, #25
 80044c8:	bf48      	it	mi
 80044ca:	b2ad      	uxthmi	r5, r5
 80044cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	bf14      	ite	ne
 80044d2:	230a      	movne	r3, #10
 80044d4:	2308      	moveq	r3, #8
 80044d6:	4850      	ldr	r0, [pc, #320]	@ (8004618 <_printf_i+0x234>)
 80044d8:	2100      	movs	r1, #0
 80044da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044de:	6866      	ldr	r6, [r4, #4]
 80044e0:	2e00      	cmp	r6, #0
 80044e2:	60a6      	str	r6, [r4, #8]
 80044e4:	db05      	blt.n	80044f2 <_printf_i+0x10e>
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	432e      	orrs	r6, r5
 80044ea:	f021 0104 	bic.w	r1, r1, #4
 80044ee:	6021      	str	r1, [r4, #0]
 80044f0:	d04b      	beq.n	800458a <_printf_i+0x1a6>
 80044f2:	4616      	mov	r6, r2
 80044f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044f8:	fb03 5711 	mls	r7, r3, r1, r5
 80044fc:	5dc7      	ldrb	r7, [r0, r7]
 80044fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004502:	462f      	mov	r7, r5
 8004504:	42bb      	cmp	r3, r7
 8004506:	460d      	mov	r5, r1
 8004508:	d9f4      	bls.n	80044f4 <_printf_i+0x110>
 800450a:	2b08      	cmp	r3, #8
 800450c:	d10b      	bne.n	8004526 <_printf_i+0x142>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	07df      	lsls	r7, r3, #31
 8004512:	d508      	bpl.n	8004526 <_printf_i+0x142>
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	6861      	ldr	r1, [r4, #4]
 8004518:	4299      	cmp	r1, r3
 800451a:	bfde      	ittt	le
 800451c:	2330      	movle	r3, #48	@ 0x30
 800451e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004526:	1b92      	subs	r2, r2, r6
 8004528:	6122      	str	r2, [r4, #16]
 800452a:	464b      	mov	r3, r9
 800452c:	4621      	mov	r1, r4
 800452e:	4640      	mov	r0, r8
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	aa03      	add	r2, sp, #12
 8004536:	f7ff fee3 	bl	8004300 <_printf_common>
 800453a:	3001      	adds	r0, #1
 800453c:	d14a      	bne.n	80045d4 <_printf_i+0x1f0>
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	b004      	add	sp, #16
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	f043 0320 	orr.w	r3, r3, #32
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	2778      	movs	r7, #120	@ 0x78
 8004552:	4832      	ldr	r0, [pc, #200]	@ (800461c <_printf_i+0x238>)
 8004554:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	6831      	ldr	r1, [r6, #0]
 800455c:	061f      	lsls	r7, r3, #24
 800455e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004562:	d402      	bmi.n	800456a <_printf_i+0x186>
 8004564:	065f      	lsls	r7, r3, #25
 8004566:	bf48      	it	mi
 8004568:	b2ad      	uxthmi	r5, r5
 800456a:	6031      	str	r1, [r6, #0]
 800456c:	07d9      	lsls	r1, r3, #31
 800456e:	bf44      	itt	mi
 8004570:	f043 0320 	orrmi.w	r3, r3, #32
 8004574:	6023      	strmi	r3, [r4, #0]
 8004576:	b11d      	cbz	r5, 8004580 <_printf_i+0x19c>
 8004578:	2310      	movs	r3, #16
 800457a:	e7ad      	b.n	80044d8 <_printf_i+0xf4>
 800457c:	4826      	ldr	r0, [pc, #152]	@ (8004618 <_printf_i+0x234>)
 800457e:	e7e9      	b.n	8004554 <_printf_i+0x170>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f023 0320 	bic.w	r3, r3, #32
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	e7f6      	b.n	8004578 <_printf_i+0x194>
 800458a:	4616      	mov	r6, r2
 800458c:	e7bd      	b.n	800450a <_printf_i+0x126>
 800458e:	6833      	ldr	r3, [r6, #0]
 8004590:	6825      	ldr	r5, [r4, #0]
 8004592:	1d18      	adds	r0, r3, #4
 8004594:	6961      	ldr	r1, [r4, #20]
 8004596:	6030      	str	r0, [r6, #0]
 8004598:	062e      	lsls	r6, r5, #24
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	d501      	bpl.n	80045a2 <_printf_i+0x1be>
 800459e:	6019      	str	r1, [r3, #0]
 80045a0:	e002      	b.n	80045a8 <_printf_i+0x1c4>
 80045a2:	0668      	lsls	r0, r5, #25
 80045a4:	d5fb      	bpl.n	800459e <_printf_i+0x1ba>
 80045a6:	8019      	strh	r1, [r3, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	4616      	mov	r6, r2
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	e7bc      	b.n	800452a <_printf_i+0x146>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	2100      	movs	r1, #0
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	6032      	str	r2, [r6, #0]
 80045b8:	681e      	ldr	r6, [r3, #0]
 80045ba:	6862      	ldr	r2, [r4, #4]
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f859 	bl	8004674 <memchr>
 80045c2:	b108      	cbz	r0, 80045c8 <_printf_i+0x1e4>
 80045c4:	1b80      	subs	r0, r0, r6
 80045c6:	6060      	str	r0, [r4, #4]
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	6123      	str	r3, [r4, #16]
 80045cc:	2300      	movs	r3, #0
 80045ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d2:	e7aa      	b.n	800452a <_printf_i+0x146>
 80045d4:	4632      	mov	r2, r6
 80045d6:	4649      	mov	r1, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	47d0      	blx	sl
 80045de:	3001      	adds	r0, #1
 80045e0:	d0ad      	beq.n	800453e <_printf_i+0x15a>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	079b      	lsls	r3, r3, #30
 80045e6:	d413      	bmi.n	8004610 <_printf_i+0x22c>
 80045e8:	68e0      	ldr	r0, [r4, #12]
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	4298      	cmp	r0, r3
 80045ee:	bfb8      	it	lt
 80045f0:	4618      	movlt	r0, r3
 80045f2:	e7a6      	b.n	8004542 <_printf_i+0x15e>
 80045f4:	2301      	movs	r3, #1
 80045f6:	4632      	mov	r2, r6
 80045f8:	4649      	mov	r1, r9
 80045fa:	4640      	mov	r0, r8
 80045fc:	47d0      	blx	sl
 80045fe:	3001      	adds	r0, #1
 8004600:	d09d      	beq.n	800453e <_printf_i+0x15a>
 8004602:	3501      	adds	r5, #1
 8004604:	68e3      	ldr	r3, [r4, #12]
 8004606:	9903      	ldr	r1, [sp, #12]
 8004608:	1a5b      	subs	r3, r3, r1
 800460a:	42ab      	cmp	r3, r5
 800460c:	dcf2      	bgt.n	80045f4 <_printf_i+0x210>
 800460e:	e7eb      	b.n	80045e8 <_printf_i+0x204>
 8004610:	2500      	movs	r5, #0
 8004612:	f104 0619 	add.w	r6, r4, #25
 8004616:	e7f5      	b.n	8004604 <_printf_i+0x220>
 8004618:	080047c7 	.word	0x080047c7
 800461c:	080047d8 	.word	0x080047d8

08004620 <memmove>:
 8004620:	4288      	cmp	r0, r1
 8004622:	b510      	push	{r4, lr}
 8004624:	eb01 0402 	add.w	r4, r1, r2
 8004628:	d902      	bls.n	8004630 <memmove+0x10>
 800462a:	4284      	cmp	r4, r0
 800462c:	4623      	mov	r3, r4
 800462e:	d807      	bhi.n	8004640 <memmove+0x20>
 8004630:	1e43      	subs	r3, r0, #1
 8004632:	42a1      	cmp	r1, r4
 8004634:	d008      	beq.n	8004648 <memmove+0x28>
 8004636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800463a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800463e:	e7f8      	b.n	8004632 <memmove+0x12>
 8004640:	4601      	mov	r1, r0
 8004642:	4402      	add	r2, r0
 8004644:	428a      	cmp	r2, r1
 8004646:	d100      	bne.n	800464a <memmove+0x2a>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800464e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004652:	e7f7      	b.n	8004644 <memmove+0x24>

08004654 <_sbrk_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	2300      	movs	r3, #0
 8004658:	4d05      	ldr	r5, [pc, #20]	@ (8004670 <_sbrk_r+0x1c>)
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fc f806 	bl	8000670 <_sbrk>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_sbrk_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_sbrk_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	2000122c 	.word	0x2000122c

08004674 <memchr>:
 8004674:	4603      	mov	r3, r0
 8004676:	b510      	push	{r4, lr}
 8004678:	b2c9      	uxtb	r1, r1
 800467a:	4402      	add	r2, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	4618      	mov	r0, r3
 8004680:	d101      	bne.n	8004686 <memchr+0x12>
 8004682:	2000      	movs	r0, #0
 8004684:	e003      	b.n	800468e <memchr+0x1a>
 8004686:	7804      	ldrb	r4, [r0, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	428c      	cmp	r4, r1
 800468c:	d1f6      	bne.n	800467c <memchr+0x8>
 800468e:	bd10      	pop	{r4, pc}

08004690 <_realloc_r>:
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004694:	4607      	mov	r7, r0
 8004696:	4614      	mov	r4, r2
 8004698:	460d      	mov	r5, r1
 800469a:	b921      	cbnz	r1, 80046a6 <_realloc_r+0x16>
 800469c:	4611      	mov	r1, r2
 800469e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	f7ff bc49 	b.w	8003f38 <_malloc_r>
 80046a6:	b92a      	cbnz	r2, 80046b4 <_realloc_r+0x24>
 80046a8:	f7ff fbdc 	bl	8003e64 <_free_r>
 80046ac:	4625      	mov	r5, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	f000 f81a 	bl	80046ec <_malloc_usable_size_r>
 80046b8:	4284      	cmp	r4, r0
 80046ba:	4606      	mov	r6, r0
 80046bc:	d802      	bhi.n	80046c4 <_realloc_r+0x34>
 80046be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046c2:	d8f4      	bhi.n	80046ae <_realloc_r+0x1e>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4638      	mov	r0, r7
 80046c8:	f7ff fc36 	bl	8003f38 <_malloc_r>
 80046cc:	4680      	mov	r8, r0
 80046ce:	b908      	cbnz	r0, 80046d4 <_realloc_r+0x44>
 80046d0:	4645      	mov	r5, r8
 80046d2:	e7ec      	b.n	80046ae <_realloc_r+0x1e>
 80046d4:	42b4      	cmp	r4, r6
 80046d6:	4622      	mov	r2, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	bf28      	it	cs
 80046dc:	4632      	movcs	r2, r6
 80046de:	f7ff fbb3 	bl	8003e48 <memcpy>
 80046e2:	4629      	mov	r1, r5
 80046e4:	4638      	mov	r0, r7
 80046e6:	f7ff fbbd 	bl	8003e64 <_free_r>
 80046ea:	e7f1      	b.n	80046d0 <_realloc_r+0x40>

080046ec <_malloc_usable_size_r>:
 80046ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f0:	1f18      	subs	r0, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfbc      	itt	lt
 80046f6:	580b      	ldrlt	r3, [r1, r0]
 80046f8:	18c0      	addlt	r0, r0, r3
 80046fa:	4770      	bx	lr

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
